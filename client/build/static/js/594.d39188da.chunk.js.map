{"version":3,"file":"static/js/594.d39188da.chunk.js","mappings":"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","sources":["webpack://cash-app/./src/Views/Dashboard/SubCategories/payments.module.scss?27dd","Views/Dashboard/SubCategories/form.js","Views/Dashboard/SubCategories/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"payments_content__xnRyH\",\"payments\":\"payments_payments__9WQ2d\",\"addCollectionForm\":\"payments_addCollectionForm__ggeoF\",\"purchaseDetail\":\"payments_purchaseDetail__J3hCj\",\"box\":\"payments_box__jb+jG\",\"noContent\":\"payments_noContent__Mmknb\",\"items\":\"payments_items__dNmiS\",\"name\":\"payments_name__meRUE\",\"optionsWrapper\":\"payments_optionsWrapper__DgTfB\",\"options\":\"payments_options__QwEzd\",\"mainForm\":\"payments_mainForm__izXEA\",\"detail\":\"payments_detail__qxtsv\",\"label\":\"payments_label__qfMnn\",\"viewOnly\":\"payments_viewOnly__2GAV3\",\"collectionFormModal\":\"payments_collectionFormModal__UEwrO\",\"dynamicForm\":\"payments_dynamicForm__MYe86\",\"productVariants\":\"payments_productVariants__6Tj++\",\"images\":\"payments_images__m5DmE\",\"selected\":\"payments_selected__FUPWG\",\"products\":\"payments_products__H61Kz\",\"product\":\"payments_product__GSYVJ\",\"thumbnail\":\"payments_thumbnail__wR+bc\",\"productDetail\":\"payments_productDetail__l5jSa\",\"price\":\"payments_price__uI-n-\",\"subtotal\":\"payments_subtotal__K93Ud\",\"variantForm\":\"payments_variantForm__Y1Ojh\",\"variantImages\":\"payments_variantImages__zhz-o\",\"fieldFormWrapper\":\"payments_fieldFormWrapper__UCXtz\",\"dataDetail\":\"payments_dataDetail__3D+oD\",\"inputDetail\":\"payments_inputDetail__OE5Pa\",\"fieldForm\":\"payments_fieldForm__2tem9\",\"fields\":\"payments_fields__FPiDJ\",\"nestedObjectFormModal\":\"payments_nestedObjectFormModal__C0V7x\",\"dynamicFormModal\":\"payments_dynamicFormModal__uNWii\"};","import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  Input,\n  Combobox,\n  Table,\n  TableActions,\n  Checkbox,\n  Select,\n  CustomRadio,\n} from \"Components/elements\";\nimport { useYup, useFetch } from \"hooks\";\nimport { Prompt, Modal } from \"Components/modal\";\nimport {\n  FaPencilAlt,\n  FaRegTrashAlt,\n  FaTimes,\n  FaCheck,\n  FaPlus,\n} from \"react-icons/fa\";\nimport * as yup from \"yup\";\nimport s from \"./payments.module.scss\";\nimport { endpoints } from \"config\";\n\nyup.addMethod(yup.string, \"noneOf\", function (arr, message) {\n  return this.test(\"noneOf\", message, function (value) {\n    const { path, createError } = this;\n    return (\n      !arr.includes(value) ||\n      createError({\n        path,\n        message: message?.replace(`{value}`, value) || message,\n      })\n    );\n  });\n});\n\nconst mainSchema = yup.object({\n  name: yup.string().required(),\n});\n\nconst optionsSchema = yup.object({\n  label: yup.string().required(),\n  value: yup.string().required(),\n});\n\nconst Form = ({ edit, collections, onSuccess }) => {\n  const [fields, setFields] = useState(\n    edit?.fields || [\n      {\n        name: \"title\",\n        required: true,\n        label: \"Title\",\n        dataType: \"string\",\n        fieldType: \"input\",\n        inputType: \"text\",\n      },\n      {\n        name: \"description\",\n        inputType: \"text\",\n        dataType: \"string\",\n        fieldType: \"textarea\",\n        label: \"Description\",\n        required: true,\n      },\n      {\n        name: \"images\",\n        required: true,\n        label: \"Images\",\n        dataType: \"array\",\n        fieldType: \"input\",\n        inputType: \"file\",\n        dataElementType: \"string\",\n        multiple: true,\n      },\n      {\n        name: \"price\",\n        inputType: \"number\",\n        dataType: \"number\",\n        fieldType: \"input\",\n        label: \"Price\",\n        required: true,\n        decimalPlaces: \"0.00\",\n      },\n      {\n        name: \"whatsappNumber\",\n        required: true,\n        label: \"WhatsApp\",\n        dataType: \"string\",\n        fieldType: \"input\",\n        inputType: \"phone\",\n      },\n    ]\n  );\n  const [editField, setEditField] = useState(null);\n  const [err, setErr] = useState(null);\n\n  const {\n    handleSubmit,\n    register,\n    reset,\n    control,\n    watch,\n    setValue,\n    clearErrors,\n    formState: { errors },\n    setError,\n  } = useForm({\n    resolver: useYup(mainSchema),\n  });\n  const {\n    post: save,\n    put: update,\n    loading,\n  } = useFetch(endpoints.adSchemas + `/${edit?._id || \"\"}`);\n  const tableName = watch(\"name\");\n  const category = watch(\"category\");\n  const onSubmit = useCallback(\n    (values) => {\n      if (!values.name && tableName) {\n        values.name = tableName;\n      }\n      if (!values.category && category) {\n        values.category = category;\n      }\n      if (!values.name) {\n        setError(\"name\", {\n          type: \"required\",\n          message: \"Subcategory name is required\",\n        });\n        return;\n      }\n      if (!values.category) {\n        setError(\"category\", {\n          type: \"required\",\n          message: \"Category is required\",\n        });\n        return;\n      }\n      if (fields.length < 1) {\n        return setErr(\"Add at least one field\");\n      }\n\n      if (!fields.find((item) => item.name === \"images\")) {\n        return setErr('\"images\" is a required field');\n      }\n      if (!fields.find((item) => item.name === \"title\")) {\n        return setErr('\"title\" is a required field');\n      }\n      if (!fields.find((item) => item.name === \"price\")) {\n        return setErr('\"price\" is a required field');\n      }\n      if (!fields.find((item) => item.name === \"whatsappNumber\")) {\n        return setErr('\"whatsappNumber\" is a required field');\n      }\n\n      (edit ? update : save)({\n        name: values.name,\n        category: values.category,\n        fields: fields.map((item) => ({ ...item, _id: undefined })),\n      })\n        .then(({ data }) => {\n          if (!data.success) {\n            return Prompt({ type: \"error\", message: data.message });\n          }\n          onSuccess(data.data);\n        })\n        .catch((err) => Prompt({ type: \"error\", message: err.message }));\n    },\n    [fields, tableName, category]\n  );\n\n  useEffect(() => {\n    if (\n      fields.length > 0 &&\n      JSON.stringify(fields) !== JSON.stringify(edit?.fields || [])\n    ) {\n      onSubmit({ name: edit?.name || \"\" });\n    }\n  }, [fields, edit]);\n  useEffect(() => {\n    reset({\n      ...edit,\n    });\n  }, [edit]);\n  return (\n    <div className={`grid gap-1 p-1 ${s.addCollectionForm}`}>\n      <form\n        onSubmit={handleSubmit(onSubmit)}\n        className={`${s.mainForm} grid gap-1`}\n      >\n        <Select\n          disabled={edit?._id}\n          label=\"Category\"\n          control={control}\n          url={endpoints.adminDynamic + \"/Category\"}\n          getQuery={(inputValue, selected) => ({\n            ...(inputValue && { name: [inputValue, ...(selected || [])] }),\n          })}\n          handleData={(item) => ({\n            label: item.name,\n            value: item.name,\n          })}\n          name=\"category\"\n          onChange={(opt) => {\n            setValue(\"category\", opt.value);\n            clearErrors(\"category\");\n          }}\n          formOptions={{ required: true }}\n        />\n        <Input\n          label=\"Subcategory name\"\n          type=\"text\"\n          {...register(\"name\")}\n          required\n          readOnly={edit}\n          error={errors.name}\n        />\n      </form>\n\n      <h3>Fields</h3>\n      <Table\n        className={s.fields}\n        columns={[\n          { label: \"Name\" },\n          ...(edit?.name === \"Product\" ? [{ label: \"Subcategory\" }] : []),\n          { label: \"Data Type\" },\n          { label: \"Label\" },\n          { label: \"Field Type\" },\n          { label: \"Input Type\" },\n          { label: \"Required\" },\n          { label: \"Action\", action: true },\n        ]}\n        placeholder=\"No fields yet.\"\n      >\n        {fields.map((item, i) => (\n          <tr key={i}>\n            <td>\n              <span className=\"ellipsis\">{item.name}</span>\n            </td>\n            {edit?.name === \"Product\" && <td>{item.subcategory}</td>}\n            <td>{item.dataType}</td>\n            <td>{item.label}</td>\n            <td>{item.fieldType}</td>\n            <td>{item.inputType}</td>\n            <td>{item.required ? \"Yes\" : \"No\"}</td>\n            <TableActions\n              actions={[\n                {\n                  icon: <FaPencilAlt />,\n                  label: \"Edit\",\n                  callBack: () => setEditField(item),\n                },\n                {\n                  icon: <FaRegTrashAlt />,\n                  label: \"Delete\",\n                  callBack: () =>\n                    Prompt({\n                      type: \"confirmation\",\n                      message: `Are you sure you want to remove this Field?`,\n                      callback: () => {\n                        setFields((prev) =>\n                          prev.filter((product) => product.name !== item.name)\n                        );\n                      },\n                    }),\n                },\n              ]}\n            />\n          </tr>\n        ))}\n      </Table>\n      {err && <p className=\"error\">{err}</p>}\n\n      <FieldForm\n        key={editField ? \"edit\" : \"add\"}\n        edit={editField}\n        editCollection={edit}\n        fields={fields}\n        collections={collections}\n        onSuccess={(newField) => {\n          setErr(null);\n          if (editField) {\n            setFields((prev) => {\n              return prev.map((item) =>\n                item.name.toLowerCase() === newField.name.toLowerCase()\n                  ? newField\n                  : item\n              );\n            });\n            setEditField(null);\n          } else {\n            setFields((prev) => [...prev, newField]);\n          }\n        }}\n        clear={() => setEditField(null)}\n      />\n\n      <form\n        onSubmit={handleSubmit(onSubmit)}\n        className={`${s.mainForm} grid gap-1`}\n      >\n        {\n          //   <div className=\"btns mt-1\">\n          //   <button className=\"btn\" disabled={editField || loading}>\n          //     {edit ? \"Update\" : \"Submit\"}\n          //   </button>\n          // </div>\n        }\n      </form>\n    </div>\n  );\n};\n\nconst defaultFields = [\n  \"title\",\n  \"description\",\n  \"images\",\n  \"price\",\n  \"whatsappNumber\",\n  \"category\",\n  \"subcategory\",\n];\n\nconst FieldForm = ({\n  edit,\n  fields,\n  editCollection,\n  collections,\n  onSuccess,\n  clear,\n}) => {\n  const {\n    handleSubmit,\n    register,\n    reset,\n    watch,\n    setValue,\n    clearErrors,\n    control,\n    formState: { errors },\n  } = useForm({\n    resolver: useYup(\n      yup.object({\n        name: yup\n          .string()\n          .noneOf(\n            fields\n              .filter((item) => (!edit ? true : edit.name !== item.name))\n              .map((item) => item.name),\n            `{value} already exists`\n          )\n          .required(),\n        dataType: yup.string().required(),\n        label: yup.string().required(),\n        fieldType: yup.string(),\n        inputType: yup.string(),\n        required: yup.boolean(),\n      })\n    ),\n  });\n  const name = watch(\"name\");\n  const inputType = watch(\"inputType\");\n  const dataType = watch(\"dataType\");\n  const dataElementType = watch(\"dataElementType\");\n  const dataElements = watch(\"fields\");\n  const collection = watch(\"collection\");\n  const fieldType = watch(\"fieldType\");\n  const optionType = watch(\"optionType\");\n  const options = watch(\"options\");\n  const label = watch(\"label\");\n  const multiple = watch(\"multiple\");\n\n  const onSubmit = useCallback(\n    (values) => {\n      if (editCollection?.name === \"Product\") {\n        const data = {};\n        Object.entries(values).forEach(([key, value]) => {\n          if (\n            (key === \"subcategory\" &&\n              !defaultFields\n                .filter((item) => item !== \"subcategory\")\n                .includes(key)) ||\n            key !== \"subcategory\"\n          ) {\n            data[key] = value;\n          }\n        });\n        onSuccess(data);\n      } else {\n        onSuccess(values);\n      }\n      reset({\n        category: \"\",\n        subcategory: \"\",\n        name: \"\",\n        inputType: \"\",\n        dataType: \"\",\n        dataElementType: \"\",\n        dataElements: \"\",\n        collection: \"\",\n        fieldType: \"\",\n        optionType: \"\",\n        options: [],\n        multiRange: \"\",\n        label: \"\",\n        required: \"\",\n        decimalPlaces: \"\",\n        unique: \"\",\n      });\n    },\n    [edit]\n  );\n  useEffect(() => {\n    reset({ ...edit });\n  }, [edit]);\n\n  return (\n    <div className={s.fieldFormWrapper}>\n      <div className={s.dataDetail}>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className={`${s.fieldForm} grid gap-1`}\n        >\n          <div className=\"flex all-columns gap-1 justify-space-between align-center\">\n            <h3>Data</h3>\n\n            <Checkbox {...register(\"unique\")} label=\"Unique\" />\n          </div>\n\n          <Input\n            label=\"Field Name\"\n            type=\"text\"\n            required\n            disabled={edit}\n            {...register(\"name\")}\n            error={errors.name}\n          />\n          <Combobox\n            label=\"Data Type\"\n            name=\"dataType\"\n            control={control}\n            formOptions={{ required: true }}\n            options={[\n              { label: \"String\", value: \"string\" },\n              { label: \"Number\", value: \"number\" },\n              { label: \"Date\", value: \"date\" },\n              { label: \"Boolean\", value: \"boolean\" },\n              { label: \"Array\", value: \"array\" },\n              { label: \"Variant Array\", value: \"variantArray\" },\n              { label: \"Object\", value: \"object\" },\n              { label: \"Object ID\", value: \"objectId\" },\n            ]}\n            disabled={edit || multiple || fieldType === \"richText\"}\n          />\n\n          {dataType === \"objectId\" && (\n            <>\n              <Select\n                control={control}\n                label=\"Collection\"\n                options={collections\n                  .filter((coll) => coll._id !== editCollection?._id)\n                  .map((item) => ({\n                    label: item.name,\n                    value: item.name,\n                  }))}\n                name=\"collection\"\n                formOptions={{ required: true }}\n                className={s.itemName}\n              />\n\n              {collection && (\n                <Combobox\n                  label=\"Foreign Field\"\n                  name=\"foreignField\"\n                  control={control}\n                  formOptions={{ required: true }}\n                  options={[\n                    {\n                      label: \"ID\",\n                      value: \"_id\",\n                    },\n                    ...(collections\n                      .find((coll) => coll.name === collection)\n                      ?.fields.map((item) => ({\n                        label: item.label,\n                        value: item.name,\n                      })) || []),\n                  ]}\n                />\n              )}\n            </>\n          )}\n\n          {[\"array\", \"variantArray\"].includes(dataType) && (\n            <Combobox\n              label=\"Data Element Type\"\n              name=\"dataElementType\"\n              control={control}\n              formOptions={{ required: true }}\n              options={[\n                { label: \"String\", value: \"string\" },\n                { label: \"Number\", value: \"number\" },\n                { label: \"Date\", value: \"date\" },\n                { label: \"Object\", value: \"object\" },\n              ]}\n            />\n          )}\n        </form>\n\n        {[\"array\", \"variantArray\"].includes(dataType) &&\n          dataElementType === \"object\" && (\n            <NestedObjectFields\n              name={label || name}\n              value={dataElements}\n              setValue={(newValue) => setValue(\"fields\", newValue)}\n              collection={editCollection}\n              collections={collections}\n            />\n          )}\n      </div>\n\n      <div className={s.inputDetail}>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className={`${s.fieldForm} grid gap-1`}\n        >\n          <div className=\"flex all-columns justify-space-between align-center\">\n            <h3 className=\"all-columns\">Input Field</h3>\n            <Checkbox {...register(\"required\")} label=\"Required\" />\n          </div>\n          <Input\n            label=\"Label\"\n            type=\"text\"\n            required\n            {...register(\"label\")}\n            error={errors.label}\n          />\n\n          {!(\n            [\"array\", \"variantArray\"].includes(dataType) &&\n            dataElementType === \"object\"\n          ) && (\n            <Combobox\n              label=\"Field Type\"\n              name=\"fieldType\"\n              control={control}\n              formOptions={{ required: true }}\n              options={[\n                { label: \"Input\", value: \"input\" },\n                { label: \"Textarea\", value: \"textarea\" },\n                { label: \"Rich Text\", value: \"richText\" },\n                { label: \"Combobox\", value: \"combobox\" },\n                { label: \"Autocomplete\", value: \"select\" },\n                { label: \"Date Range\", value: \"dateRange\" },\n                { label: \"Collection Filter\", value: \"collectionFilter\" },\n                { label: \"None\", value: \"none\" },\n              ]}\n              onChange={(opt) => {\n                if (opt?.value === \"richText\") {\n                  setValue(\"dataType\", \"object\");\n                }\n              }}\n            />\n          )}\n\n          {!(\n            [\n              \"combobox\",\n              \"textarea\",\n              \"richText\",\n              \"collectionFilter\",\n              \"none\",\n            ].includes(fieldType) ||\n            ([\"array\", \"variantArray\"].includes(dataType) &&\n              dataElementType === \"object\") ||\n            ([\"includeProducts\", \"excludeProducts\"].includes(name) &&\n              dataType === \"object\")\n          ) && (\n            <Combobox\n              label=\"Input Type\"\n              name=\"inputType\"\n              control={control}\n              options={\n                fieldType === \"dateRange\"\n                  ? [{ label: \"Calendar\", value: \"calendar\" }]\n                  : [\n                      { label: \"Text\", value: \"text\" },\n                      { label: \"Number\", value: \"number\" },\n                      ...(fieldType !== \"select\"\n                        ? [\n                            { label: \"Phone Number\", value: \"phone\" },\n                            { label: \"Date\", value: \"date\" },\n                            { label: \"File\", value: \"file\" },\n                            { label: \"Calendar\", value: \"calendar\" },\n                            { label: \"Password\", value: \"password\" },\n                          ]\n                        : []),\n                    ]\n              }\n            />\n          )}\n\n          {inputType === \"number\" && (\n            <Combobox\n              label=\"Decimal Places\"\n              name=\"decimalPlaces\"\n              control={control}\n              options={[\n                { label: \"1\", value: \"0\" },\n                { label: \"1.0\", value: \"0.0\" },\n                { label: \"1.00\", value: \"0.00\" },\n                { label: \"1.000\", value: \"0.000\" },\n                { label: \"1.0000\", value: \"0.0000\" },\n                { label: \"1.00000\", value: \"0.00000\" },\n              ]}\n            />\n          )}\n\n          {[\"combobox\", \"select\"].includes(fieldType) && (\n            <Combobox\n              label=\"Options type\"\n              name=\"optionType\"\n              control={control}\n              formOptions={{ required: true }}\n              options={[\n                { label: \"Predefined\", value: \"array\" },\n                {\n                  label: \"Other Collection\",\n                  value: \"collection\",\n                  disabled: fieldType === \"combobox\",\n                },\n              ]}\n            />\n          )}\n\n          {[\"collection\"].includes(optionType) && (\n            <>\n              <Select\n                control={control}\n                label={\"Collection\"}\n                options={collections\n                  .filter((coll) => coll._id !== editCollection?._id)\n                  .map((item) => ({\n                    label: item.name,\n                    value: item.name,\n                  }))}\n                name=\"collection\"\n                formOptions={{ required: true }}\n                className={s.itemName}\n              />\n\n              {collection && (\n                <>\n                  <Combobox\n                    label=\"Option Label\"\n                    name=\"optionLabel\"\n                    control={control}\n                    formOptions={{ required: true }}\n                    options={[\n                      {\n                        label: \"ID\",\n                        value: \"_id\",\n                      },\n                      ...(collections\n                        .find((coll) => coll.name === collection)\n                        ?.fields.map((item) => ({\n                          label: item.label,\n                          value: item.name,\n                        })) || []),\n                    ]}\n                  />\n\n                  <Combobox\n                    label=\"Option Value\"\n                    name=\"optionValue\"\n                    control={control}\n                    formOptions={{ required: true }}\n                    options={[\n                      {\n                        label: \"ID\",\n                        value: \"_id\",\n                      },\n                      ...(collections\n                        .find((coll) => coll.name === collection)\n                        ?.fields.map((item) => ({\n                          label: item.label,\n                          value: item.name,\n                        })) || []),\n                    ]}\n                  />\n                </>\n              )}\n            </>\n          )}\n        </form>\n\n        {[\"combobox\", \"select\"].includes(fieldType) &&\n          optionType === \"array\" && (\n            <>\n              <h3>{label} Options</h3>\n              <Options\n                dataType={dataType}\n                options={options}\n                setOptions={(newOptions) => setValue(\"options\", newOptions)}\n              />\n            </>\n          )}\n\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className={`${s.fieldForm} grid gap-1`}\n        >\n          {([\"file\"].includes(inputType) ||\n            [\"select\", \"combobox\"].includes(fieldType)) && (\n            <Checkbox\n              {...register(\"multiple\")}\n              label=\"Multiple\"\n              onChange={(e) => {\n                if (e.target.checked) {\n                  setValue(\"dataType\", \"array\");\n                  setValue(\"dataElementType\", \"string\");\n                }\n              }}\n            />\n          )}\n\n          {inputType === \"calendar\" && (\n            <>\n              <Combobox\n                label=\"Date Window\"\n                name=\"dateWindow\"\n                control={control}\n                options={[\n                  { label: \"All time\", value: \"allTime\" },\n                  {\n                    label: \"Past including Today\",\n                    value: \"pastIncludingToday\",\n                  },\n                  {\n                    label: \"Past excluding Today\",\n                    value: \"pastExcludingToday\",\n                  },\n                  {\n                    label: \"Future including Today\",\n                    value: \"futureIncludingToday\",\n                  },\n                  {\n                    label: \"Future excluding Today\",\n                    value: \"futureExcludingToday\",\n                  },\n                ]}\n              />\n\n              <Combobox\n                label=\"Multiple Range\"\n                name=\"multipleRanges\"\n                control={control}\n                options={[\n                  { label: \"Yes\", value: true },\n                  { label: \"No\", value: false },\n                ]}\n              />\n            </>\n          )}\n        </form>\n\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className={`flex gap-1 justify-center`}\n        >\n          {edit && (\n            <button className=\"btn\" type=\"button\" onClick={clear}>\n              Clear\n            </button>\n          )}\n          <button className=\"btn\">{edit ? \"Update\" : \"Add\"} Field</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst NestedObjectFields = ({\n  name,\n  value = [],\n  setValue,\n  collection,\n  collections,\n}) => {\n  const [edit, setEdit] = useState(null);\n  const [formOpen, setFormOpen] = useState(null);\n  return (\n    <>\n      <div className=\"flex justify-space-between align-center\">\n        <h3>{name} Fields</h3>\n        <button className=\"btn\" onClick={() => setFormOpen(true)}>\n          Add {name} Field\n        </button>\n      </div>\n      <Table\n        className={s.fields}\n        columns={[\n          { label: \"Name\" },\n          { label: \"Data Type\" },\n          { label: \"Label\" },\n          { label: \"Field Type\" },\n          { label: \"Input Type\" },\n          { label: \"Required\" },\n          { label: \"Action\", action: true },\n        ]}\n        placeholder=\"No fields yet.\"\n      >\n        {value.map((item, i) => (\n          <tr key={i}>\n            <td>\n              <span className=\"ellipsis\">{item.name}</span>\n            </td>\n            <td>{item.dataType}</td>\n            <td>{item.label}</td>\n            <td>{item.fieldType}</td>\n            <td>{item.inputType}</td>\n            <td>{item.required ? \"Yes\" : \"No\"}</td>\n            <TableActions\n              actions={[\n                {\n                  icon: <FaPencilAlt />,\n                  label: \"Edit\",\n                  callBack: () => {\n                    setEdit(item);\n                    setFormOpen(true);\n                  },\n                },\n                {\n                  icon: <FaRegTrashAlt />,\n                  label: \"Delete\",\n                  callBack: () =>\n                    Prompt({\n                      type: \"confirmation\",\n                      message: `Are you sure you want to remove this Field?`,\n                      callback: () => {\n                        setValue(\n                          value.filter((field) => field.name !== item.name)\n                        );\n                      },\n                    }),\n                },\n              ]}\n            />\n          </tr>\n        ))}\n      </Table>\n\n      <Modal\n        head\n        label={`${edit ? \"Update\" : \"Add\"} ${name} Field`}\n        open={formOpen}\n        setOpen={() => {\n          setFormOpen(false);\n          setEdit(null);\n        }}\n        className={s.nestedObjectFormModal}\n      >\n        <FieldForm\n          key={edit ? \"edit\" : \"add\"}\n          edit={edit}\n          fields={value}\n          editCollection={collection}\n          collections={collections}\n          onSuccess={(newField) => {\n            if (edit) {\n              setValue(\n                value.map((item) =>\n                  item.name.toLowerCase() === newField.name.toLowerCase()\n                    ? newField\n                    : item\n                )\n              );\n              setEdit(null);\n            } else {\n              setValue([...value, newField]);\n            }\n            setFormOpen(false);\n          }}\n          clear={() => setEdit(null)}\n        />\n      </Modal>\n    </>\n  );\n};\n\nconst Options = ({ dataType, options, setOptions }) => {\n  const [edit, setEdit] = useState(null);\n  return (\n    <section className={s.optionsWrapper}>\n      <Table\n        className={`${s.options}`}\n        columns={[{ label: \"Label\" }, { label: \"Value\" }, { label: \"Action\" }]}\n      >\n        <tr className=\"inlineForm\">\n          <td>\n            <OptionsForm\n              dataType={dataType}\n              edit={edit}\n              onSuccess={(newOption) => {\n                if (edit) {\n                  setOptions(\n                    (options || []).map((item) =>\n                      item._id === newOption._id ? newOption : item\n                    )\n                  );\n                } else {\n                  setOptions([newOption, ...(options || [])]);\n                }\n                setEdit(null);\n              }}\n              clearForm={() => setEdit(null)}\n            />\n          </td>\n        </tr>\n        {options?.map((item, i) => (\n          <tr key={i}>\n            <td>{item.label}</td>\n            <td>{item.value?.toString()}</td>\n            <TableActions\n              actions={[\n                {\n                  icon: <FaPencilAlt />,\n                  label: \"Edit\",\n                  callBack: () => {\n                    setEdit(item);\n                  },\n                },\n                {\n                  icon: <FaRegTrashAlt />,\n                  label: \"Delete\",\n                  callBack: () =>\n                    Prompt({\n                      type: \"confirmation\",\n                      message: `Are you sure you want to remove this Option?`,\n                      callback: () => {\n                        setOptions(\n                          (options || []).filter(\n                            (product) => product._id !== item._id\n                          )\n                        );\n                      },\n                    }),\n                },\n              ]}\n            />\n          </tr>\n        ))}\n      </Table>\n    </section>\n  );\n};\nconst OptionsForm = ({ dataType, edit, onSuccess, clearForm }) => {\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: useYup(optionsSchema),\n  });\n  useEffect(() => {\n    reset({\n      label: edit?.label || \"\",\n      value: edit?.value || \"\",\n    });\n  }, [edit]);\n  return (\n    <form\n      onSubmit={handleSubmit((values) => {\n        if (dataType === \"boolean\") {\n          values.value = [\"1\", 1, \"true\"].includes(values.value.toLowerCase());\n        } else if (dataType === \"number\") {\n          values.value = +values.value;\n        }\n        onSuccess({\n          ...values,\n          _id: edit?._id || Math.random().toString(36).substr(-8),\n        });\n        reset();\n      })}\n    >\n      <Input {...register(\"label\")} placeholder=\"Label\" error={errors.label} />\n      <Input {...register(\"value\")} placeholder=\"Value\" error={errors.value} />\n\n      <section className=\"btns\">\n        <button className=\"btn clear border iconOnly\" type=\"submit\">\n          {edit ? <FaCheck /> : <FaPlus />}\n        </button>\n        {edit && (\n          <button\n            className=\"btn clear border iconOnly\"\n            type=\"button\"\n            onClick={() => {\n              clearForm();\n              // reset();\n            }}\n          >\n            <FaTimes />\n          </button>\n        )}\n      </section>\n    </form>\n  );\n};\n\nexport default Form;\n","import { useEffect, useState, useCallback, useContext } from \"react\";\nimport { useFetch } from \"hooks\";\nimport { Prompt, Modal } from \"Components/modal\";\nimport { endpoints } from \"config\";\nimport { Table, TableActions } from \"Components/elements\";\nimport { FaPencilAlt, FaRegTrashAlt } from \"react-icons/fa\";\nimport s from \"./payments.module.scss\";\n\nimport CollectionForm from \"./form\";\nimport { SiteContext } from \"SiteContext\";\n\nconst Collections = () => {\n  const [edit, setEdit] = useState(null);\n  const [collections, setCollections] = useState([]);\n  const [schemas, setSchemas] = useState([]);\n  const { get: getCollections } = useFetch(endpoints.adminCollections);\n  const { get: getSchema, loading } = useFetch(endpoints.adSchemas);\n  const { remove: deleteSchema, loading: deleting } = useFetch(\n    endpoints.adSchemas + `/{ID}`\n  );\n\n  const fetchRecords = useCallback(() => {\n    getSchema()\n      .then(({ data }) => {\n        if (data.success) {\n          return setSchemas(data.data);\n        }\n      })\n      .catch((err) => Prompt({ type: \"error\", message: err.message }));\n  }, []);\n\n  useEffect(() => {\n    fetchRecords();\n    getCollections()\n      .then(({ data }) => {\n        if (data.success) {\n          return setCollections(data.data);\n        }\n      })\n      .catch((err) => Prompt({ type: \"error\", message: err.message }));\n  }, []);\n\n  return (\n    <div className={`${s.content} grid gap-1 m-a p-1`}>\n      <div className=\"flex justify-space-between\">\n        <h2>All Sub Categories</h2>\n        <div className=\"flex gap-1\">\n          <button className=\"btn m-a mr-0\" onClick={() => setEdit(true)}>\n            Add Sub Categories\n          </button>\n        </div>\n      </div>\n      <Table\n        loading={loading}\n        className={s.collections}\n        columns={[{ label: \"Name\" }, { label: \"Action\" }]}\n      >\n        {schemas.map((item, i) => (\n          <tr key={i}>\n            <td>{item.name}</td>\n            <TableActions\n              actions={[\n                {\n                  icon: <FaPencilAlt />,\n                  label: \"Edit\",\n                  callBack: () => {\n                    setEdit(item);\n                  },\n                },\n                {\n                  icon: <FaRegTrashAlt />,\n                  label: \"Delete\",\n                  disabled: deleting,\n                  callBack: () =>\n                    Prompt({\n                      type: \"confirmation\",\n                      message: `Are you sure you want to remove this Subcategory?`,\n                      callback: () => {\n                        deleteSchema(\n                          {},\n                          {\n                            params: {\n                              \"{ID}\": item._id,\n                            },\n                          }\n                        )\n                          .then(({ data }) => {\n                            if (data?.success) {\n                              setSchemas((prev) =>\n                                prev.filter(\n                                  (product) => product._id !== item._id\n                                )\n                              );\n                            }\n                          })\n                          .catch((err) =>\n                            Prompt({\n                              type: \"error\",\n                              message: err.message,\n                            })\n                          );\n                      },\n                    }),\n                },\n              ]}\n            />\n          </tr>\n        ))}\n      </Table>\n\n      <Modal\n        head\n        label={`${edit?._id ? \"Update\" : \"Add\"} Subcategory`}\n        open={!!edit}\n        setOpen={() => {\n          setEdit(null);\n        }}\n        className={s.collectionFormModal}\n      >\n        <CollectionForm\n          collections={collections.filter((item) => item.name !== \"Category\")}\n          edit={edit?._id ? edit : null}\n          onSuccess={(newSchema) => {\n            if (edit?._id) {\n              setSchemas((prev) =>\n                prev.map((t) =>\n                  t._id.toLowerCase() === edit._id.toLowerCase() ? newSchema : t\n                )\n              );\n              setEdit(newSchema);\n            } else {\n              setEdit(newSchema);\n              setSchemas((prev) => [...prev, newSchema]);\n            }\n          }}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default Collections;\n"],"names":["yup","arr","message","this","test","value","path","createError","includes","replace","mainSchema","name","required","optionsSchema","label","defaultFields","FieldForm","edit","fields","editCollection","collections","onSuccess","clear","useForm","resolver","useYup","noneOf","filter","item","map","dataType","fieldType","inputType","handleSubmit","register","reset","watch","setValue","control","clearErrors","errors","formState","dataElementType","dataElements","collection","optionType","options","multiple","onSubmit","useCallback","values","data","Object","entries","forEach","key","category","subcategory","multiRange","decimalPlaces","unique","useEffect","className","s","type","disabled","error","formOptions","coll","_id","find","NestedObjectFields","newValue","onChange","opt","Options","setOptions","newOptions","e","target","checked","onClick","useState","setEdit","formOpen","setFormOpen","columns","action","placeholder","i","actions","icon","callBack","Prompt","callback","field","head","open","setOpen","newField","toLowerCase","OptionsForm","newOption","clearForm","toString","product","Math","random","substr","setFields","editField","setEditField","err","setErr","setError","useFetch","endpoints","save","post","update","put","tableName","loading","length","undefined","then","success","catch","JSON","stringify","url","getQuery","inputValue","selected","handleData","readOnly","prev","setCollections","schemas","setSchemas","getCollections","get","getSchema","deleteSchema","remove","deleting","fetchRecords","params","newSchema","t"],"sourceRoot":""}