{"version":3,"file":"static/js/310.7ef7e4e9.chunk.js","mappings":"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","sources":["webpack://cash-app/./src/Views/Dashboard/AdminSettings/settings.module.scss?89b7","Views/Dashboard/AdminSettings/siteConfig.js","Views/Dashboard/AdminSettings/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"settings_container__jOWsZ\",\"itemColumnsRadio\":\"settings_itemColumnsRadio__I8qGL\",\"landingPageShelveFormModal\":\"settings_landingPageShelveFormModal__1wmLh\"};","import { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { endpoints } from \"config\";\nimport { useFetch } from \"hooks\";\nimport { Prompt, Modal } from \"Components/modal\";\nimport {\n  Input,\n  Combobox,\n  Select,\n  CustomRadio,\n  Table,\n} from \"Components/elements\";\n\nconst SiteConfig = () => {\n  const [fields, setFields] = useState([]);\n  const [updateSidebarFilters, setUpdateSidebarFilters] = useState(false);\n  const {\n    handleSubmit,\n    register,\n    reset,\n    watch,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const [storeConfig, setStoreConfig] = useState(null);\n  const {\n    get: getConfig,\n    put: updateConfig,\n    loading,\n  } = useFetch(endpoints.storeConfig);\n\n  const [categories, setCategories] = useState([]);\n\n  const { get: getCategories } = useFetch(endpoints.homeCategories);\n\n  useEffect(() => {\n    reset({\n      sidebarFilters: storeConfig?.sidebarFilters || [],\n    });\n  }, [storeConfig]);\n\n  const category = watch(\"category\");\n  const subcategory = watch(\"subcategory\");\n\n  const sidebarFilters = watch(\"sidebarFilters\");\n\n  useEffect(() => {\n    getConfig()\n      .then(({ data }) => {\n        if (data.success) {\n          setStoreConfig(data.data);\n        } else {\n          Prompt({ type: \"error\", message: data.message });\n        }\n      })\n      .catch((err) => Prompt({ type: \"error\", message: err.message }));\n    getCategories()\n      .then(({ data }) => {\n        if (data.success) {\n          setCategories(data.data);\n        } else {\n          Prompt({ type: \"error\", message: data.message });\n        }\n      })\n      .catch((err) => Prompt({ type: \"error\", message: err.message }));\n  }, []);\n\n  return (\n    <form\n      className=\"grid gap-1\"\n      onSubmit={handleSubmit((values) => {\n        const payload = { sidebarFilters: values.sidebarFilters };\n\n        updateConfig(payload)\n          .then(({ data }) => {\n            if (data.success) {\n              setStoreConfig(data.data);\n              Prompt({\n                type: \"information\",\n                message: \"Updates have been saved.\",\n              });\n            } else {\n              Prompt({ type: \"error\", message: data.message });\n            }\n          })\n          .catch((err) => Prompt({ type: \"error\", data: err.message }));\n      })}\n    >\n      <div className=\"flex gap-1 justify-center align-center mb-1\">\n        <Select\n          label=\"Category\"\n          control={control}\n          name=\"category\"\n          options={categories.map((item) => ({\n            label: item.name,\n            value: item.name,\n          }))}\n          onChange={() => setValue(\"subcategory\", \"\")}\n        />\n\n        <Select\n          label=\"Subcategory\"\n          control={control}\n          name=\"subcategory\"\n          options={(\n            categories.find((item) => item.name === category)?.subCategories ||\n            []\n          ).map((item) => ({\n            label: item.name,\n            value: item.name,\n            fields: item.fields,\n          }))}\n          onChange={(opt) => {\n            setFields(\n              (opt.fields || []).filter(\n                (item) =>\n                  !(\n                    [\"file\"].includes(item.inputType) ||\n                    [\"whatsappNumber\"].includes(item.name)\n                  )\n              )\n            );\n          }}\n        />\n      </div>\n\n      {category && subcategory && (\n        <div>\n          <div className=\"flex gap-1 justify-space-between align-center mb-1\">\n            <h5>Sidebar filters</h5>\n\n            <button\n              className=\"btn\"\n              type=\"button\"\n              onClick={() => setUpdateSidebarFilters(true)}\n            >\n              Update Sidebar Filters\n            </button>\n          </div>\n          <Table\n            columns={[\n              { label: \"Field\" },\n              { label: \"Filter Type\" },\n              { label: \"Filter Style\" },\n            ]}\n          >\n            {sidebarFilters\n              ?.find(\n                (item) =>\n                  item.category === category && item.subcategory === subcategory\n              )\n              ?.filters?.map((item, i) => (\n                <tr key={i}>\n                  <td>{item.fieldName}</td>\n                  <td>{item.filterType}</td>\n                  <td>{item.filterStyle}</td>\n                </tr>\n              ))}\n          </Table>\n        </div>\n      )}\n\n      <Modal\n        open={updateSidebarFilters}\n        head\n        label=\"Update Sidebar Filters\"\n        setOpen={() => setUpdateSidebarFilters(false)}\n      >\n        <SidebarFilters\n          fields={fields}\n          value={\n            sidebarFilters?.find(\n              (item) =>\n                item.category === category && item.subcategory === subcategory\n            )?.filters\n          }\n          onSuccess={(values) => {\n            setValue(\"sidebarFilters\", [\n              ...sidebarFilters.filter(\n                (item) =>\n                  !(\n                    item.category === category &&\n                    item.subcategory === subcategory\n                  )\n              ),\n              { category, subcategory: subcategory, filters: values },\n            ]);\n            setUpdateSidebarFilters(false);\n          }}\n        />\n      </Modal>\n\n      <button className=\"btn\">Save Changes</button>\n    </form>\n  );\n};\n\nconst SidebarFilters = ({\n  fields = [],\n  value = [],\n  onSuccess,\n  includeValue,\n}) => {\n  const {\n    handleSubmit,\n    register,\n    control,\n    watch,\n    reset,\n    getValues,\n    formState: { errors },\n  } = useForm();\n  const selectedFields = watch(\"fields\");\n  // if (includeValue) {\n  for (var i = 0; i < fields.length; i++) {\n    const field = fields[i];\n    const value = watch(`${field.name}.filterType`);\n  }\n  // }\n  useEffect(() => {\n    const data = {\n      fields: value.map((item) => item.fieldName),\n    };\n    value.forEach((field) => {\n      const { fieldName, ...options } = field;\n      Object.entries(options).forEach(([key, value]) => {\n        data[fieldName] = { ...data[fieldName] };\n        if (value !== undefined) {\n          data[fieldName][key] = value;\n        }\n      });\n    });\n    reset(data);\n  }, []);\n  return (\n    <form\n      onSubmit={handleSubmit((values) => {\n        const data = [];\n        values.fields.forEach((f) => {\n          const field = fields.find((field) => field.name === f);\n          if (!field) return;\n          data.push({\n            fieldName: f,\n            ...([\"input\", \"textarea\"].includes(field.fieldType) && {\n              filterType: values[f]?.filterType || \"textSearch\",\n              ...(includeValue && {\n                ...(values[f]?.filterType !== \"minMax\" && {\n                  value: values[f]?.value,\n                }),\n                ...(values[f]?.filterType === \"minMax\" && {\n                  min: values[f]?.min,\n                  max: values[f]?.max,\n                }),\n              }),\n            }),\n            ...([\"slider\", \"range\"].includes(values[f]?.filterType) && {\n              min: values[f]?.min,\n              max: values[f]?.max,\n            }),\n            ...([\"select\", \"combobox\"].includes(field.fieldType) && {\n              filterStyle: values[f]?.filterStyle,\n              ...(includeValue && { value: values[f]?.value }),\n            }),\n          });\n        });\n        onSuccess(data);\n      })}\n      className=\"p-1 grid gap-1\"\n    >\n      <CustomRadio\n        control={control}\n        name=\"fields\"\n        multiple\n        label=\"Filter Fields\"\n        sortable\n        options={(value.length\n          ? fields\n              .sort((a, b, i) => {\n                if (!value?.includes(a.value)) {\n                  return 1;\n                }\n                return value.findIndex((i) => i === a.value) >\n                  value.findIndex((i) => i === b.value)\n                  ? 1\n                  : -1;\n              })\n              .reverse()\n              .map((item, i, arr) => ({ ...item, order: arr.length - i }))\n          : fields\n        ).map((item) => ({\n          label: item.label,\n          value: item.name,\n          data: item,\n        }))}\n      />\n\n      {selectedFields?.map((f, i) => {\n        const field = fields.find((field) => field.name === f);\n        if (!field) return null;\n        if ([\"input\", \"textarea\"].includes(field.fieldType)) {\n          if (field.dataType === \"string\") {\n            return (\n              <div key={i}>\n                <p>\n                  <strong>{field.label}:</strong> Text Search\n                </p>\n                {includeValue && (\n                  <Input label=\"Value\" {...register(`${field.name}.value`)} />\n                )}\n              </div>\n            );\n          } else if (field.dataType === \"number\") {\n            return (\n              <div key={i}>\n                <p className=\"mb_5\">\n                  <strong>{field.label}:</strong>{\" \"}\n                </p>\n                <Combobox\n                  control={control}\n                  name={`${field.name}.filterType`}\n                  label=\"Filter Style\"\n                  options={[\n                    { label: \"Min-Max\", value: \"minMax\" },\n                    { label: \"Exact Match\", value: \"match\" },\n                    { label: \"Range\", value: \"range\" },\n                    // { label: \"Slider\", value: \"slider\" },\n                  ]}\n                  formOptions={{ required: \"Select an option\" }}\n                />\n                {!includeValue &&\n                  [\"slider\", \"range\"].includes(\n                    getValues(`${field.name}.filterType`)\n                  ) && (\n                    <>\n                      <Input\n                        type=\"number\"\n                        label=\"Min\"\n                        {...register(`${field.name}.min`, {\n                          required: \"Please enter a value\",\n                        })}\n                        error={errors[field.name]?.min}\n                      />\n                      <Input\n                        type=\"number\"\n                        label=\"Max\"\n                        {...register(`${field.name}.max`, {\n                          required: \"Please enter a value\",\n                        })}\n                        error={errors[field.name]?.max}\n                      />\n                    </>\n                  )}\n                {includeValue && (\n                  <>\n                    {getValues(`${field.name}.filterType`) === \"minMax\" && (\n                      <>\n                        <Input\n                          type=\"number\"\n                          label=\"Minimum\"\n                          {...register(`${field.name}.min`)}\n                        />\n                        <Input\n                          type=\"number\"\n                          label=\"Maximum\"\n                          {...register(`${field.name}.max`)}\n                        />\n                      </>\n                    )}\n                    {getValues(`${field.name}.filterType`) === \"match\" && (\n                      <Input\n                        type=\"number\"\n                        label=\"Value\"\n                        {...register(`${field.name}.value`)}\n                      />\n                    )}\n                  </>\n                )}\n              </div>\n            );\n          }\n        } else if ([\"select\", \"combobox\"].includes(field.fieldType)) {\n          return (\n            <div key={i}>\n              <p className=\"mb_5\">\n                <strong>{field.label}:</strong>\n              </p>\n\n              {includeValue ? (\n                <Select\n                  label=\"Value\"\n                  multiple\n                  control={control}\n                  name={`${field.name}.value`}\n                  {...(field.optionType === \"predefined\" && {\n                    options: field.options,\n                  })}\n                  {...(field.optionType === \"collection\" && {\n                    url: `${endpoints.dynamic}/${field.collection}`,\n                  })}\n                  getQuery={(inputValue, selected) => ({\n                    ...(inputValue && { [field.optionLabel]: inputValue }),\n                    ...(selected && { [field.optionValue]: selected }),\n                  })}\n                  handleData={(item) => ({\n                    label: item[field.optionLabel],\n                    value: item[field.optionValue],\n                  })}\n                />\n              ) : (\n                <Combobox\n                  control={control}\n                  name={`${field.name}.filterStyle`}\n                  label=\"Filter Style\"\n                  options={[\n                    { label: \"List\", value: \"list\" },\n                    { label: \"Dropdown\", value: \"dropdown\" },\n                  ]}\n                  formOptions={{ required: \"Select an option\" }}\n                />\n              )}\n            </div>\n          );\n        }\n      })}\n\n      <div className=\"flex justify-center\">\n        <button className=\"btn\">Update</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SiteConfig;\n","import { Tabs } from \"Components/elements\";\nimport s from \"./settings.module.scss\";\nimport { paths } from \"config\";\nimport { Routes, Route } from \"react-router-dom\";\n\nimport SiteConfig from \"./siteConfig\";\n\nconst Settings = () => {\n  return (\n    <div className={s.container}>\n      <Tabs tabs={[{ label: \"Site Configurations\", path: \"site-config\" }]} />\n      <Routes>\n        <Route path={paths.settings.siteConfig} element={<SiteConfig />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default Settings;\n"],"names":["SidebarFilters","fields","value","onSuccess","includeValue","useForm","handleSubmit","register","control","watch","reset","getValues","errors","formState","selectedFields","i","length","field","name","useEffect","data","map","item","fieldName","forEach","options","Object","entries","key","undefined","onSubmit","values","f","find","push","includes","fieldType","filterType","min","max","filterStyle","className","multiple","label","sortable","sort","a","b","findIndex","reverse","arr","order","dataType","formOptions","required","type","error","optionType","url","endpoints","collection","getQuery","inputValue","selected","optionLabel","optionValue","handleData","useState","setFields","updateSidebarFilters","setUpdateSidebarFilters","setValue","storeConfig","setStoreConfig","useFetch","getConfig","get","updateConfig","put","loading","categories","setCategories","getCategories","sidebarFilters","category","subcategory","then","success","Prompt","message","catch","err","payload","onChange","subCategories","opt","filter","inputType","onClick","columns","filters","open","head","setOpen","s","tabs","path","paths","element"],"sourceRoot":""}