{"version":3,"file":"static/js/170.bd9d7647.chunk.js","mappings":"8NACA,GAAgB,QAAU,sBAAsB,SAAW,uBAAuB,UAAY,wBAAwB,cAAgB,4BAA4B,YAAc,0BAA0B,SAAW,uBAAuB,OAAS,qBAAqB,SAAW,uBAAuB,YAAc,0BAA0B,KAAO,mBAAmB,IAAM,kBAAkB,KAAO,mBAAmB,QAAU,sBAAsB,IAAM,mB,sCC0FhcA,EAAU,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MACtB,OACE,iBAAKC,UAAS,UAAKC,EAAAA,IAAL,YAAcA,EAAEH,EAAII,OAASH,MAAOA,EAAlD,UACgB,cAAbD,EAAII,OACH,iBAAKF,UAAWC,EAAAA,QAAhB,UACGH,EAAIK,OAAQ,SAAC,MAAD,KACC,IAAbL,EAAIK,OAAkB,SAAC,KAAD,QAG3B,cAAGH,UAAWC,EAAAA,QAAd,SAA0BH,EAAIM,WAC9B,SAAC,KAAD,CAAQC,OAAO,SAAf,SAAyBP,EAAIQ,gBAKnC,EApGiB,SAAC,GAAc,IAAD,QAAXC,EAAW,EAAXA,KAClB,GAAsCC,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,OACE,iBAAKV,UAAS,qBAAgBC,EAAAA,UAA9B,WACE,iBAAKD,UAAS,yBAAoBC,EAAAA,QAAlC,WACE,iBAAKD,UAAWC,EAAAA,KAAhB,WACE,kCAAKM,EAAKI,YAAV,aAAK,EAAWC,QAChB,iCAAIL,EAAKI,YAAT,aAAI,EAAWE,SACf,iCAAIN,EAAKI,YAAT,aAAI,EAAWG,YAGjB,iBAAKd,UAAWC,EAAAA,MAAhB,WACE,0BACE,gDACA,SAAC,KAAD,CAAQI,OAAO,qBAAf,SAAqCE,EAAKD,gBAE5C,0BACE,gDACA,SAAC,KAAD,CAAQD,OAAO,qBAAf,SAAqCE,EAAKQ,gBAE5C,0BACE,iDACCR,EAAKS,SAASC,OAAS,MAE1B,0BACE,qDACCV,EAAKS,SAASE,QAAO,SAACC,GAAD,MAAwB,cAAdA,EAAKjB,QAAsBe,WAE7D,0BACE,uDAEEV,EAAKS,SAASE,QACZ,SAACC,GAAD,MAAwB,cAAdA,EAAKjB,OAAsC,IAAdiB,EAAKhB,QAC5Cc,WAGN,0BACE,0DAEEV,EAAKS,SAASE,QACZ,SAACC,GAAD,MAAwB,cAAdA,EAAKjB,OAAsC,IAAdiB,EAAKhB,QAC5Cc,cAKR,mBAAQjB,UAAU,MAAMoB,QAAS,kBAAMV,GAAgBD,IAAvD,8BAIF,gBAAKT,UAAWC,EAAAA,SAAhB,SACGM,EAAKS,SACHE,QAAO,SAACC,GAAD,MAAwB,WAAdA,EAAKP,QACtBS,KAAI,SAACF,EAAMG,EAAGC,GAAV,OACH,UAAC,EAAAC,SAAD,WACGD,EAAID,EAAI,IACP,IAAIG,KAAKF,EAAID,EAAI,GAAGhB,WAAWoB,YAC7B,IAAID,KAAKN,EAAKb,WAAWoB,YACzB,cAAG1B,UAAWC,EAAAA,KAAd,UACE,SAAC,KAAD,CAAQI,OAAO,cAAf,SAA8Bc,EAAKb,cAGlC,IAANgB,IACC,cAAGtB,UAAWC,EAAAA,KAAd,UACE,SAAC,KAAD,CAAQI,OAAO,cAAf,SAA8Bc,EAAKb,eAGvC,SAACT,EAAD,CAASC,IAAKqB,MAbDA,EAAKQ,UAkBzBlB,IACC,SAAC,IAAD,CAAOmB,KAAMnB,EAAaoB,QAASnB,EAAgBoB,MAAI,EAACC,MAAM,UAA9D,UACE,gBAAK/B,UAAWC,EAAAA,YAAhB,mBACGM,EAAKS,SAAS,UADjB,aACG,EAAkBZ,QAChB4B,MAAM,MACNX,KAAI,SAACF,EAAMG,GAAP,OAAcH,GAAO,uBAAYA,GAAJG,GAAgB,gB,UCwChE,EA/Gc,SAAC,GAAwB,IAAtBW,EAAqB,EAArBA,eACf,GAAkCC,EAAAA,EAAAA,YAAWC,EAAAA,GAArCxB,EAAR,EAAQA,KAAMyB,EAAd,EAAcA,gBACd,GAA0B5B,EAAAA,EAAAA,UAAS,IAAnC,eAAO6B,EAAP,KAAcC,EAAd,KACA,GAAwB9B,EAAAA,EAAAA,UAAS,MAAjC,eAAOD,EAAP,KAAagC,EAAb,KAEA,GAAmCC,EAAAA,EAAAA,GAASC,EAAAA,GAAAA,OAA/BC,EAAb,EAAQC,IAAeC,EAAvB,EAAuBA,QACPC,GAAeL,EAAAA,EAAAA,GAASC,EAAAA,GAAAA,MAAkB,SAAlDK,OAWR,OATAC,EAAAA,EAAAA,YAAU,WACRL,IACGM,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACP,GAAIA,EAAKC,QACP,OAAOZ,EAASW,EAAKA,SAGxBE,OAAM,SAACC,GAAD,OAASC,EAAAA,EAAAA,GAAO,CAAEC,KAAM,QAASC,QAASH,EAAIG,eACtD,KAED,iBAAKvD,UAAS,UAAKC,EAAAA,QAAL,uBAAd,WACE,gBAAKD,UAAU,OAAf,UACE,iBACEA,UAAS,wCACToB,QAAS,kBAAMa,GAAe,SAACuB,GAAD,OAAWA,MAF3C,WAIE,SAAC,MAAD,CAAQzD,MAAO,CAAE0D,SAAU,cAC3B,4CAGJ,SAAC,KAAD,CACEb,QAASA,EACT5C,UAAS,UAAKC,EAAAA,SAAL,YACW,UAAlBU,EAAK+C,SAAuBzD,EAAAA,UAAc,IAE5C0D,QAAS,CACP,CAAE5B,MAAO,QACT,CAAEA,MAAO,QAET,CAAEA,MAAO,SACT,CAAEA,MAAO,kBACT,CAAEA,MAAO,eACT,CAAEA,MAAO,SAAU/B,UAAW,WAZlC,SAeGqC,EAAMhB,KAAI,SAACF,GAAD,aACT,gBAAIpB,MAAO,CAAE6D,OAAQ,WAArB,WACE,yBACE,SAAC,KAAD,CAAQvD,OAAO,qBAAf,SAAqCc,EAAKb,eAE5C,kCAAKa,EAAKR,YAAV,aAAK,EAAWC,QAEhB,wBAAKO,EAAK0C,SACV,wBAAK1C,EAAKH,SAASC,OAAS,KAC5B,wBAAKE,EAAK2C,cACV,SAAC,KAAD,CACE9D,UAAWC,EAAAA,QACX8D,QAAO,CACL,CACEC,MAAM,SAAC,MAAD,IACNjC,MAAO,OACPkC,SAAU,WACR1B,EAAQpB,MALP,eAQDiB,EAAgB,eAChB,CACE,CACE4B,MAAM,SAAC,MAAD,IACNjC,MAAO,SACPkC,SAAU,kBACRZ,EAAAA,EAAAA,GAAO,CACLC,KAAM,eACNC,QAAQ,6CACRW,SAAU,WACRrB,EACE,GACA,CAAEsB,OAAQ,CAAE,OAAQhD,EAAKQ,OACzBqB,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACJA,EAAKC,QACPZ,GAAS,SAACkB,GAAD,OACPA,EAAKtC,QAAO,SAACkD,GAAD,OAAUA,EAAKzC,MAAQR,EAAKQ,WAG1C0B,EAAAA,EAAAA,GAAO,CACLC,KAAM,QACNC,QAASN,EAAKM,mBAQ9B,SAhD6BpC,EAAKQ,WAsDhD,SAAC,IAAD,CACEC,KAAMrB,EACNuB,MAAI,EACJC,MAAK,OACL/B,UAAWC,EAAAA,cACX4B,QAAS,kBAAMU,EAAQ,OALzB,UAOE,SAAC,EAAD,CAAahC,KAAMA","sources":["webpack://cash-app/./src/Views/Dashboard/Chats/chat.module.scss?ff22","Views/Dashboard/Chats/ChatForm.js","Views/Dashboard/Chats/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"chat_content__zOulD\",\"subPlans\":\"chat_subPlans__H3lcW\",\"adminView\":\"chat_adminView__ubc+2\",\"fullChatModal\":\"chat_fullChatModal__yf1FM\",\"chatContext\":\"chat_chatContext__k0EWE\",\"fullChat\":\"chat_fullChat__WRb26\",\"detail\":\"chat_detail__qgKty\",\"messages\":\"chat_messages__BhAuS\",\"placeholder\":\"chat_placeholder__tiwrY\",\"date\":\"chat_date__ZPeXL\",\"msg\":\"chat_msg__UHaM0\",\"user\":\"chat_user__w6L8V\",\"actions\":\"chat_actions__04l0D\",\"btn\":\"chat_btn__4OyPB\"};","import { HiThumbDown, HiThumbUp } from \"react-icons/hi\";\nimport s from \"./chat.module.scss\";\nimport { Moment } from \"Components/elements\";\nimport { Fragment, useState } from \"react\";\nimport { Modal } from \"Components/modal\";\n\nconst FullChat = ({ chat }) => {\n  const [viewContext, setViewContext] = useState(false);\n  return (\n    <div className={`grid gap-1 ${s.fullChat}`}>\n      <div className={`grid p-1 gap-1 ${s.detail}`}>\n        <div className={s.user}>\n          <h4>{chat.user?.name}</h4>\n          <p>{chat.user?.phone}</p>\n          <p>{chat.user?.email}</p>\n        </div>\n\n        <div className={s.other}>\n          <p>\n            <strong>Chat Started: </strong>\n            <Moment format=\"DD MMM YYYY hh:mma\">{chat.createdAt}</Moment>\n          </p>\n          <p>\n            <strong>Last Message: </strong>\n            <Moment format=\"DD MMM YYYY hh:mma\">{chat.updatedAt}</Moment>\n          </p>\n          <p>\n            <strong>Total Messages: </strong>\n            {chat.messages.length - 1}\n          </p>\n          <p>\n            <strong>Assistant Response: </strong>\n            {chat.messages.filter((item) => item.role === \"assistant\").length}\n          </p>\n          <p>\n            <strong>Total Liked Messages: </strong>\n            {\n              chat.messages.filter(\n                (item) => item.role === \"assistant\" && item.like === true\n              ).length\n            }\n          </p>\n          <p>\n            <strong>Total Disliked Messages: </strong>\n            {\n              chat.messages.filter(\n                (item) => item.role === \"assistant\" && item.like === false\n              ).length\n            }\n          </p>\n        </div>\n\n        <button className=\"btn\" onClick={() => setViewContext(!viewContext)}>\n          View Context\n        </button>\n      </div>\n      <div className={s.messages}>\n        {chat.messages\n          .filter((item) => item.name !== \"System\")\n          .map((item, i, arr) => (\n            <Fragment key={item._id}>\n              {arr[i - 1] &&\n                new Date(arr[i - 1].createdAt).getDate() !==\n                  new Date(item.createdAt).getDate() && (\n                  <p className={s.date}>\n                    <Moment format=\"DD MMM YYYY\">{item.createdAt}</Moment>\n                  </p>\n                )}\n              {i === 0 && (\n                <p className={s.date}>\n                  <Moment format=\"DD MMM YYYY\">{item.createdAt}</Moment>\n                </p>\n              )}\n              <Message msg={item} />\n            </Fragment>\n          ))}\n      </div>\n\n      {viewContext && (\n        <Modal open={viewContext} setOpen={setViewContext} head label=\"Context\">\n          <div className={s.chatContext}>\n            {chat.messages[0]?.content\n              .split(\"\\n\")\n              .map((item, i) => (item ? <p key={i}>{item}</p> : null))}\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nconst Message = ({ msg, style }) => {\n  return (\n    <div className={`${s.msg} ${s[msg.role]}`} style={style}>\n      {msg.role === \"assistant\" && (\n        <div className={s.actions}>\n          {msg.like && <HiThumbUp />}\n          {msg.like === false && <HiThumbDown />}\n        </div>\n      )}\n      <p className={s.content}>{msg.content}</p>\n      <Moment format=\"hh:mma\">{msg.createdAt}</Moment>\n    </div>\n  );\n};\n\nexport default FullChat;\n","import { useState, useEffect, useContext } from \"react\";\nimport { SiteContext } from \"SiteContext\";\nimport { Moment, Table, TableActions } from \"Components/elements\";\nimport { FaRegEye, FaRegTrashAlt } from \"react-icons/fa\";\nimport { Prompt, Modal } from \"Components/modal\";\nimport s from \"./chat.module.scss\";\nimport { useFetch } from \"hooks\";\nimport { endpoints } from \"config\";\n\nimport SubPlanForm from \"./ChatForm\";\nimport { BsList } from \"react-icons/bs\";\n\nconst Chats = ({ setSidebarOpen }) => {\n  const { user, checkPermission } = useContext(SiteContext);\n  const [chats, setChats] = useState([]);\n  const [chat, setChat] = useState(null);\n\n  const { get: getChats, loading } = useFetch(endpoints.chats);\n  const { remove: deleteChat } = useFetch(endpoints.chats + \"/{ID}\");\n\n  useEffect(() => {\n    getChats()\n      .then(({ data }) => {\n        if (data.success) {\n          return setChats(data.data);\n        }\n      })\n      .catch((err) => Prompt({ type: \"error\", message: err.message }));\n  }, []);\n  return (\n    <div className={`${s.content} grid gap-1 m-a p-1`}>\n      <div className=\"flex\">\n        <div\n          className={`flex align-center pointer gap_5  ml-1`}\n          onClick={() => setSidebarOpen((prev) => !prev)}\n        >\n          <BsList style={{ fontSize: \"1.75rem\" }} />\n          <h2>All Chats</h2>\n        </div>\n      </div>\n      <Table\n        loading={loading}\n        className={`${s.subPlans} ${\n          user.userType === \"admin\" ? s.adminView : \"\"\n        }`}\n        columns={[\n          { label: \"Date\" },\n          { label: \"User\" },\n          // ...(user.userType === \"admin\" ? [{ label: \"Business\" }] : []),\n          { label: \"Topic\" },\n          { label: \"Total Messages\" },\n          { label: \"Token Usage\" },\n          { label: \"Action\", className: \"action\" },\n        ]}\n      >\n        {chats.map((item) => (\n          <tr style={{ cursor: \"pointer\" }} key={item._id}>\n            <td>\n              <Moment format=\"DD MMM YYYY hh:mma\">{item.createdAt}</Moment>\n            </td>\n            <td>{item.user?.name}</td>\n            {/* {user.userType === \"admin\" && <td>{item.business?.name}</td>} */}\n            <td>{item.topic}</td>\n            <td>{item.messages.length - 1}</td>\n            <td>{item.tokenUsage}</td>\n            <TableActions\n              className={s.actions}\n              actions={[\n                {\n                  icon: <FaRegEye />,\n                  label: \"View\",\n                  callBack: () => {\n                    setChat(item);\n                  },\n                },\n                ...(checkPermission(\"chat_delete\")\n                  ? [\n                      {\n                        icon: <FaRegTrashAlt />,\n                        label: \"Delete\",\n                        callBack: () =>\n                          Prompt({\n                            type: \"confirmation\",\n                            message: `Are you sure you want to remove this Chat?`,\n                            callback: () => {\n                              deleteChat(\n                                {},\n                                { params: { \"{ID}\": item._id } }\n                              ).then(({ data }) => {\n                                if (data.success) {\n                                  setChats((prev) =>\n                                    prev.filter((plan) => plan._id !== item._id)\n                                  );\n                                } else {\n                                  Prompt({\n                                    type: \"error\",\n                                    message: data.message,\n                                  });\n                                }\n                              });\n                            },\n                          }),\n                      },\n                    ]\n                  : []),\n              ]}\n            />\n          </tr>\n        ))}\n      </Table>\n      <Modal\n        open={chat}\n        head\n        label={`Chat`}\n        className={s.fullChatModal}\n        setOpen={() => setChat(null)}\n      >\n        <SubPlanForm chat={chat} />\n      </Modal>\n    </div>\n  );\n};\n\nexport default Chats;\n"],"names":["Message","msg","style","className","s","role","like","content","format","createdAt","chat","useState","viewContext","setViewContext","user","name","phone","email","updatedAt","messages","length","filter","item","onClick","map","i","arr","Fragment","Date","getDate","_id","open","setOpen","head","label","split","setSidebarOpen","useContext","SiteContext","checkPermission","chats","setChats","setChat","useFetch","endpoints","getChats","get","loading","deleteChat","remove","useEffect","then","data","success","catch","err","Prompt","type","message","prev","fontSize","userType","columns","cursor","topic","tokenUsage","actions","icon","callBack","callback","params","plan"],"sourceRoot":""}