{"version":3,"file":"static/js/977.3b5759e6.chunk.js","mappings":"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","sources":["webpack://cash-app/./src/Views/Dashboard/Inventory/quotes.module.scss?4ca7","Views/Dashboard/Inventory/BranchForm.js","Views/Dashboard/Inventory/MasterForm.js","Views/Dashboard/Inventory/Filters.js","Views/Dashboard/Inventory/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"quotes_content__niBb4\",\"innerWrapper\":\"quotes_innerWrapper__eqA-i\",\"sidebar\":\"quotes_sidebar__J-8f3\",\"addButton\":\"quotes_addButton__u9EdI\",\"btns\":\"quotes_btns__4+XC2\",\"listItem\":\"quotes_listItem__WD70k\",\"label\":\"quotes_label__KbFIm\",\"accountName\":\"quotes_accountName__7d1uP\",\"highlight\":\"quotes_highlight__oAB8h\",\"nestedList\":\"quotes_nestedList__hnP2n\",\"open\":\"quotes_open__1j-GY\",\"innerContent\":\"quotes_innerContent__AASR0\",\"innerContentWrapper\":\"quotes_innerContentWrapper__wL0J2\",\"vouchers\":\"quotes_vouchers__B6a0g\",\"footer\":\"quotes_footer__NlFGZ\",\"analysysPlaceholder\":\"quotes_analysysPlaceholder__WFSHT\",\"entryForm\":\"quotes_entryForm__oFShb\",\"voucherFilters\":\"quotes_voucherFilters__Mobw4\",\"masterFormModal\":\"quotes_masterFormModal__mLMGL\",\"masterForm\":\"quotes_masterForm__peHJD\",\"head\":\"quotes_head__x3HSY\"};","import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Input } from \"Components/elements\";\nimport { useYup, useFetch } from \"hooks\";\nimport { Prompt } from \"Components/modal\";\nimport * as yup from \"yup\";\nimport s from \"./quotes.module.scss\";\nimport { endpoints } from \"config\";\n\nconst mainSchema = yup.object({\n  name: yup.string().required(\"Please enter a name\"),\n});\n\nconst Form = ({ edit, onSuccess }) => {\n  const {\n    handleSubmit,\n    register,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: useYup(mainSchema),\n  });\n\n  const {\n    post: createMaster,\n    put: updateMaster,\n    loading,\n  } = useFetch(endpoints.inventoryBranches + `/${edit?._id || \"\"}`);\n\n  useEffect(() => {\n    reset({\n      name: edit?.name || \"\",\n    });\n  }, [edit]);\n  return (\n    <form\n      onSubmit={handleSubmit((values) => {\n        (edit?._id ? updateMaster : createMaster)({\n          name: values.name,\n        })\n          .then(({ data }) => {\n            if (!data.success) {\n              return Prompt({ type: \"error\", message: data.message });\n            }\n            onSuccess(data.data);\n          })\n          .catch((err) => Prompt({ type: \"error\", message: err.message }));\n      })}\n      className={`${s.masterForm} grid gap-1`}\n    >\n      <Input label=\"Name\" {...register(\"name\")} required error={errors.name} />\n\n      <div className=\"btns\">\n        <button className=\"btn\" disabled={loading}>\n          {edit?._id ? \"Update\" : \"Submit\"}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Input, Select, Combobox } from \"Components/elements\";\nimport { useYup, useFetch } from \"hooks\";\nimport { Prompt } from \"Components/modal\";\nimport * as yup from \"yup\";\nimport s from \"./quotes.module.scss\";\nimport { endpoints } from \"config\";\nimport { RiCloseLargeFill } from \"react-icons/ri\";\n\nconst mainSchema = yup.object({\n  name: yup.string().required(\"Please enter a name\"),\n  isGroup: yup.boolean().required(),\n  parent: yup.string().when(\"isGroup\", {\n    is: false,\n    then: (schema) => schema.required(\"Please select a group.\"),\n    otherwise: (schema) => schema,\n  }),\n  // type: yup\n  //   .string()\n  //   .oneOf([\n  //     \"Cash\",\n  //     \"Bank\",\n  //     \"Customers\",\n  //     \"Suppliers\",\n  //     \"Sales\",\n  //     \"Purchase\",\n  //     \"Stock\",\n  //     \"null\",\n  //     \"Tax\",\n  //     null,\n  //   ])\n  //   .nullable(),\n});\n\nconst Form = ({ edit, masters = [], onSuccess }) => {\n  const [entries, setEntries] = useState([]);\n  const {\n    handleSubmit,\n    register,\n    reset,\n    control,\n    setValue,\n    setError,\n    watch,\n    clearErrors,\n    formState: { errors },\n  } = useForm({\n    resolver: useYup(mainSchema),\n  });\n\n  const isGroup = watch(\"isGroup\");\n\n  const {\n    post: createMaster,\n    put: updateMaster,\n    loading,\n  } = useFetch(endpoints.inventoryMasters + `/${edit?._id || \"\"}`);\n\n  useEffect(() => {\n    const values = {\n      name: edit?.name || \"\",\n      parent: edit?.parent || \"\",\n      // type: edit?.type || \"null\",\n      isGroup: edit?.isGroup ?? true,\n    };\n    if (edit?.openingStocks?.length) {\n      edit?.openingStocks?.forEach((entry, i) => {\n        values[`entries_${i}_branch`] = entry.branch;\n        values[`entries_${i}_openingStock`] = entry.openingStock;\n        values[`entries_${i}_cost`] = entry.cost;\n        values[`entries_${i}_reorderQty`] = entry.reorderQty;\n      });\n    } else {\n      values.entries_0_branch = \"\";\n      values.entries_0_openingStock = \"\";\n      values.entries_0_cost = \"\";\n      values.entries_0_reorderQty = \"\";\n    }\n    reset(values);\n    setEntries(\n      edit?.openingStocks?.length\n        ? edit?.openingStocks\n        : [\n            {\n              _id: Math.random().toString(36),\n              branch: \"\",\n              openingStock: \"\",\n              reorderQty: \"\",\n            },\n          ]\n    );\n  }, [edit]);\n  return (\n    <form\n      onSubmit={handleSubmit((values) => {\n        if (\n          !values.isGroup &&\n          entries.some((entry, i) => {\n            if (entry.branch && entry.amount) {\n              return false;\n            }\n            if (!entry.branch) {\n              setError(`entries_${i}_branch`, {\n                type: \"custom\",\n                message: \"Name is required.\",\n              });\n            }\n            if (!entry.openingStock) {\n              setError(`entries_${i}_openingStock`, {\n                type: \"custom\",\n                message: \"Stock is required.\",\n              });\n            }\n            if (!entry.cost) {\n              setError(`entries_${i}_cost`, {\n                type: \"custom\",\n                message: \"Cost is required.\",\n              });\n            }\n            if (!entry.reorderQty) {\n              setError(`entries_${i}_reorderQty`, {\n                type: \"custom\",\n                message: \"Reorder QTY is required.\",\n              });\n            }\n            return true;\n          })\n        ) {\n          return;\n        }\n\n        if (!values.parent) {\n          values.parent = null;\n        }\n\n        const payload = {\n          name: values.name,\n          isGroup: values.isGroup,\n          parent: values.parent,\n          type: values.type,\n        };\n        if (!values.isGroup) {\n          payload.openingStocks = entries.map((entry) => ({\n            branch: entry.branch,\n            openingStock: entry.openingStock,\n            cost: entry.cost,\n            reorderQty: entry.reorderQty,\n          }));\n        }\n        (edit?._id ? updateMaster : createMaster)(payload)\n          .then(({ data }) => {\n            if (!data.success) {\n              return Prompt({ type: \"error\", message: data.message });\n            }\n            onSuccess(data.data);\n          })\n          .catch((err) => Prompt({ type: \"error\", message: err.message }));\n      })}\n      className={`${s.masterForm} grid gap-1`}\n    >\n      <Input label=\"Name\" {...register(\"name\")} required error={errors.name} />\n\n      <Combobox\n        label=\"Parent\"\n        name=\"parent\"\n        control={control}\n        formOptions={{ required: !isGroup }}\n        placeholder=\"\"\n        options={[\n          { label: \"None\", value: \"\" },\n          ...masters.map((item) => ({ label: item.name, value: item._id })),\n        ]}\n      />\n\n      {/* <Combobox\n        label=\"Type\"\n        name=\"type\"\n        control={control}\n        options={[\n          { label: \"None\", value: \"null\" },\n          { label: \"Cash\", value: \"Cash\" },\n          { label: \"Bank\", value: \"Bank\" },\n          { label: \"Customers\", value: \"Customers\" },\n          { label: \"Suppliers\", value: \"Suppliers\" },\n          { label: \"Sales\", value: \"Sales\" },\n          { label: \"Purchase\", value: \"Purchase\" },\n          { label: \"Stock\", value: \"Stock\" },\n          { label: \"Tax\", value: \"Tax\" },\n        ]}\n      /> */}\n\n      <Combobox\n        label=\"Is Group\"\n        name=\"isGroup\"\n        control={control}\n        formOptions={{ required: true }}\n        options={[\n          { label: \"No\", value: false },\n          { label: \"Yes\", value: true },\n        ]}\n      />\n\n      {!isGroup && (\n        <>\n          <h3>Opening Stocks</h3>\n\n          {(entries || []).map((entry, i) => (\n            <div key={entry._id} className={s.entryForm}>\n              <Select\n                label=\"Branch\"\n                control={control}\n                name={`entries_${i}_branch`}\n                formOptions={{ required: true }}\n                url={endpoints.inventoryBranches}\n                getQuery={(v) => ({ name: v })}\n                handleData={(data) => ({\n                  label: data.name,\n                  value: data._id,\n                })}\n                onChange={(opt) => {\n                  clearErrors(`entries_${i}_openingStock`);\n                  setEntries((prev) =>\n                    prev.map((item) =>\n                      item._id === entry._id\n                        ? { ...item, branch: opt.value }\n                        : item\n                    )\n                  );\n                }}\n              />\n              <Input\n                label=\"Opening Stock\"\n                type=\"number\"\n                required\n                {...register(`entries_${i}_openingStock`)}\n                onChange={(e) => {\n                  clearErrors(`entries_${i}_openingStock`);\n                  setEntries((prev) =>\n                    prev.map((item) =>\n                      item._id === entry._id\n                        ? { ...item, openingStock: e.target.value }\n                        : item\n                    )\n                  );\n                }}\n                error={errors[`entries_${i}_openingStock`]}\n              />\n              <Input\n                label=\"Cost\"\n                type=\"number\"\n                required\n                {...register(`entries_${i}_cost`)}\n                onChange={(e) => {\n                  clearErrors(`entries_${i}_cost`);\n                  setEntries((prev) =>\n                    prev.map((item) =>\n                      item._id === entry._id\n                        ? { ...item, cost: e.target.value }\n                        : item\n                    )\n                  );\n                }}\n                error={errors[`entries_${i}_cost`]}\n              />\n              <Input\n                label=\"Reorder QTY\"\n                type=\"number\"\n                required\n                {...register(`entries_${i}_reorderQty`)}\n                onChange={(e) => {\n                  clearErrors(`entries_${i}_reorderQty`);\n                  setEntries((prev) =>\n                    prev.map((item) =>\n                      item._id === entry._id\n                        ? { ...item, reorderQty: e.target.value }\n                        : item\n                    )\n                  );\n                }}\n                error={errors[`entries_${i}_reorderQty`]}\n              />\n\n              {entries?.length > 1 && (\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    setEntries((prev) =>\n                      prev.filter((item) => item._id !== entry._id)\n                    )\n                  }\n                  className=\"btn clear iconOnly\"\n                >\n                  <RiCloseLargeFill />\n                </button>\n              )}\n            </div>\n          ))}\n\n          {!loading && (\n            <button\n              type=\"button\"\n              className=\"btn secondary\"\n              onClick={() => {\n                setValue(`entries_${entries.length}_type`, \"credit\");\n                setEntries((prev) => [\n                  ...prev,\n                  {\n                    _id: Math.random().toString(36),\n                    type: \"credit\",\n                    accountId: \"\",\n                    debit: \"\",\n                    credit: \"\",\n                  },\n                ]);\n              }}\n            >\n              Add More Stock\n            </button>\n          )}\n        </>\n      )}\n\n      <div className=\"btns\">\n        <button className=\"btn\" disabled={loading}>\n          {edit?._id ? \"Update\" : \"Submit\"}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import { useForm } from \"react-hook-form\";\nimport { Input, Combobox } from \"Components/elements\";\nimport s from \"./quotes.module.scss\";\n\nconst VoucherFilters = ({ filters, setFilters }) => {\n  const {\n    handleSubmit,\n    register,\n    reset,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <form\n      onSubmit={handleSubmit((values) => {\n        const filters = {};\n        if (values.type) {\n          filters.type = values.type;\n        }\n        if (values.startDate && values.endDate) {\n          filters.startDate = values.startDate;\n          filters.endDate = values.endDate;\n        }\n        setFilters(filters);\n      })}\n      className={`${s.voucherFilters} grid gap-1`}\n    >\n      <Combobox\n        label=\"Type\"\n        name=\"type\"\n        control={control}\n        options={[\n          { label: \"Invoice\", value: \"Invoice\" },\n          { label: \"Sales Return\", value: \"Sales Return\" },\n          { label: \"Purchase\", value: \"Purchase\" },\n          { label: \"Purchase Return\", value: \"Purchase Return\" },\n          { label: \"Receipt\", value: \"Receipt\" },\n          { label: \"Payment\", value: \"Payment\" },\n        ]}\n      />\n\n      <Input\n        label=\"Start Date\"\n        type=\"datetime-local\"\n        {...register(\"startDate\")}\n        required\n        error={errors.startDate}\n      />\n      <Input\n        label=\"End Date\"\n        type=\"datetime-local\"\n        {...register(\"endDate\")}\n        required\n        error={errors.endDate}\n      />\n\n      <div className=\"flex gap-1\">\n        <button className=\"btn\">Search</button>\n        <button\n          className=\"btn secondary\"\n          type=\"button\"\n          onClick={() => {\n            reset();\n            setFilters({});\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default VoucherFilters;\n","import { useState, useEffect, useMemo, useRef } from \"react\";\nimport { Table, Moment, Tabs } from \"Components/elements\";\nimport { Prompt, Modal } from \"Components/modal\";\nimport s from \"./quotes.module.scss\";\nimport { useFetch } from \"hooks\";\nimport { endpoints } from \"config\";\n\nimport BranchForm from \"./BranchForm\";\nimport MasterForm from \"./MasterForm\";\nimport {\n  BsDashSquare,\n  BsFillPlusSquareFill,\n  BsList,\n  BsPlusSquare,\n} from \"react-icons/bs\";\nimport { FiEdit3 } from \"react-icons/fi\";\nimport { PiTreeViewBold } from \"react-icons/pi\";\nimport { CgSpinner } from \"react-icons/cg\";\nimport VoucherFilters from \"./Filters\";\n\nconst buildTree = (accounts) => {\n  const accountMap = {};\n  accounts.forEach((account) => {\n    account.children = [];\n    accountMap[account._id] = account;\n  });\n\n  const tree = [];\n\n  accounts.forEach((account) => {\n    if (account.parent) {\n      const parent = accountMap[account.parent];\n      if (parent) {\n        parent.children.push(account);\n      }\n    } else {\n      tree.push(account);\n    }\n  });\n\n  return tree;\n};\n\nconst AccountNode = ({\n  account,\n  setAddMaster,\n  activeGroup,\n  activeLeaf,\n  activeLeavs = [],\n  onClick = () => {},\n}) => {\n  const [children, setChildren] = useState([]);\n  const [open, setOpen] = useState(false);\n  const { get: getMasters, loading } = useFetch(endpoints.inventoryMasters);\n\n  useEffect(() => {\n    if (account.children) {\n      if (\n        account.children.length &&\n        account.totalChildren > account.children.length\n      ) {\n        getMasters({ query: { parent: account._id } })\n          .then(({ data }) => {\n            if (data.success) {\n              setChildren(data.data);\n              setOpen(true);\n            } else {\n              Prompt({ type: \"error\", message: data.message });\n            }\n          })\n          .catch((err) => Prompt({ type: \"error\", message: err.message }));\n      } else {\n        setChildren(account.children);\n        setOpen(account?.isGroup ? account.children.length > 0 : false);\n      }\n    }\n  }, [account.children]);\n\n  return (\n    <li style={{ whiteSpace: \"nowrap\" }} className={s.listItem}>\n      <div className={s.label}>\n        {account.isGroup && (\n          <>\n            {(children?.length || account.totalChildren) > 0 ? (\n              <button\n                onClick={() => {\n                  if (children?.length === account.totalChildren) {\n                    setOpen(!open);\n                  } else {\n                    getMasters({ query: { parent: account._id } })\n                      .then(({ data }) => {\n                        if (data.success) {\n                          setChildren(data.data);\n                          setOpen(true);\n                        } else {\n                          Prompt({ type: \"error\", message: data.message });\n                        }\n                      })\n                      .catch((err) =>\n                        Prompt({ type: \"error\", message: err.message })\n                      );\n                  }\n                }}\n              >\n                {loading ? (\n                  <CgSpinner className=\"spin\" />\n                ) : open ? (\n                  <BsDashSquare />\n                ) : (\n                  <BsPlusSquare />\n                )}\n              </button>\n            ) : (\n              <button\n                style={{\n                  height: \"16px\",\n                  width: \"16px\",\n                  // background: \"none\",\n                  border: \"1px dashed #818181\",\n                  borderRadius: \"2px\",\n                  pointerEvents: \"none\",\n                }}\n              />\n            )}\n          </>\n        )}\n        <strong\n          className={`${s.accountName} ${\n            (account.isGroup && activeGroup === account._id) ||\n            (!account.isGroup && activeLeaf === account._id) ||\n            activeLeavs.includes(account._id)\n              ? s.highlight\n              : \"\"\n          }`}\n          onClick={() => {\n            onClick(account);\n          }}\n        >\n          {account.name}\n        </strong>\n        <div className={s.btns}>\n          <button className={s.addButton} onClick={() => setAddMaster(account)}>\n            <FiEdit3 />\n          </button>\n          {account.isGroup && (\n            <button\n              className={s.addButton}\n              onClick={() =>\n                setAddMaster({\n                  parent: account._id,\n                  type: account.type || \"\",\n                  isGroup: false,\n                })\n              }\n            >\n              <BsFillPlusSquareFill />\n            </button>\n          )}\n        </div>\n      </div>\n      {open && children.length > 0 && (\n        <ul\n          className={`${s.nestedList} ${\n            account.isGroup && activeGroup === account._id ? s.highlight : \"\"\n          }`}\n        >\n          {children.map((child) => (\n            <AccountNode\n              key={child._id}\n              activeGroup={activeGroup}\n              activeLeaf={activeLeaf}\n              activeLeavs={activeLeavs}\n              account={child}\n              setAddMaster={setAddMaster}\n              onClick={onClick}\n            />\n          ))}\n        </ul>\n      )}\n    </li>\n  );\n};\n\nconst Accounting = ({ setSidebarOpen }) => {\n  const [addMaster, setAddMaster] = useState(null);\n  const [masters, setMasters] = useState([]);\n  const [tab, setTab] = useState(\"voucherListing\");\n  const [addBranch, setAddBranch] = useState(false);\n  const [sidebarTab, setSidebarTab] = useState(\"accounts\");\n  const [open, setOpen] = useState(true);\n  const [analysysAcc, setAnalysysAcc] = useState(null);\n  const [ledger, setLedger] = useState({});\n  const [vouchers, setVouchers] = useState([]);\n  const [journalAcc, setJournalAcc] = useState([]);\n\n  const { get: getMasters } = useFetch(endpoints.inventoryMasters);\n\n  const treeData = useMemo(() => buildTree(masters), [masters]);\n\n  useEffect(() => {\n    getMasters({ query: { isGroup: \"true\" } })\n      .then(({ data }) => {\n        if (data.success) {\n          return setMasters(data.data);\n        }\n      })\n      .catch((err) => Prompt({ type: \"error\", message: err.message }));\n  }, []);\n\n  return (\n    <div className={`${s.content} grid gap-1 m-a`}>\n      <div className={`flex ${s.head}`}>\n        <div\n          className={`flex align-center pointer gap_5  ml-1`}\n          onClick={() => setSidebarOpen((prev) => !prev)}\n        >\n          <BsList style={{ fontSize: \"1.75rem\" }} />\n          <h2>Inventory</h2>\n        </div>\n      </div>\n\n      <div className={`${s.innerWrapper} ${open ? s.open : \"\"}`}>\n        <div className={s.sidebar}>\n          <div>\n            <Tabs\n              activeTab={sidebarTab}\n              tabs={[\n                { label: \"Accounts\", value: \"accounts\" },\n                { label: \"Branches\", value: \"branches\" },\n              ]}\n              onChange={(tab) => setSidebarTab(tab.value)}\n            />\n            <button\n              className={s.addButton}\n              onClick={() => {\n                if (sidebarTab === \"accounts\") {\n                  setAddMaster({});\n                } else if (sidebarTab === \"branches\") {\n                  setAddBranch(true);\n                }\n              }}\n            >\n              <BsFillPlusSquareFill />\n            </button>\n          </div>\n          {sidebarTab === \"accounts\" && (\n            <ul>\n              {masters.length > 0 ? (\n                treeData.map((account) => (\n                  <AccountNode\n                    key={account._id}\n                    account={account}\n                    setAddMaster={setAddMaster}\n                    activeGroup={tab === \"analysys\" ? analysysAcc?._id : null}\n                    activeLeaf={tab === \"ledgers\" ? ledger?.account?._id : null}\n                    activeLeavs={\n                      tab === \"journals\" ? journalAcc.map((acc) => acc._id) : []\n                    }\n                    onClick={(account) => {\n                      // if (tab === \"journals\") {\n                      //   if (!account.isGroup) {\n                      //     setJournalAcc((prev) =>\n                      //       prev.some((acc) => acc._id === account._id)\n                      //         ? prev.filter((acc) => acc._id !== account._id)\n                      //         : [...prev, account].filter(\n                      //             (acc, i, arr) =>\n                      //               arr.findIndex(\n                      //                 (item) => item._id === acc._id\n                      //               ) === i\n                      //           )\n                      //     );\n                      //   }\n                      //   return;\n                      // }\n                      // if (account.isGroup) {\n                      //   setAnalysysAcc(account);\n                      //   setTab(\"analysys\");\n                      // } else {\n                      //   const firstRecords = (vouchers || []).filter(\n                      //     (item) => item.accountId === account._id\n                      //   );\n                      //   const otherRecords = (vouchers || []).filter((item) =>\n                      //     firstRecords.some((rec) => rec.rec_id === item.rec_id)\n                      //   );\n                      //   const allRecords = [\n                      //     ...firstRecords,\n                      //     ...otherRecords,\n                      //   ].filter(\n                      //     (obj, index, self) =>\n                      //       index ===\n                      //       self.findIndex(\n                      //         (o) =>\n                      //           o.rec_id === obj.rec_id && o.index === obj.index\n                      //       )\n                      //   );\n                      //   const detailedRows = allRecords\n                      //     .filter((row) => row.accountId !== account._id)\n                      //     .reduce((p, c) => {\n                      //       const index = p.findIndex((item) =>\n                      //         item.some((row) => row.rec_id === c.rec_id)\n                      //       );\n                      //       if (index === -1) {\n                      //         p.push([c]);\n                      //       } else {\n                      //         p[index].push(c);\n                      //       }\n                      //       return p;\n                      //     }, [])\n                      //     .map((item) => {\n                      //       const accRec = allRecords.find(\n                      //         (rec) => rec.rec_id === item[0].rec_id\n                      //       );\n                      //       if (item.length <= 1) {\n                      //         return {\n                      //           ...item[0],\n                      //           debit: accRec.debit,\n                      //           credit: accRec.credit,\n                      //         };\n                      //       } else {\n                      //         return {\n                      //           ...item[0],\n                      //           details: item.map((row) => ({\n                      //             label: row.accountName,\n                      //             value: row.credit || row.debit,\n                      //           })),\n                      //           // credit: item.reduce((p, c) => p + c.credit, 0),\n                      //           // debit: item.reduce((p, c) => p + c.debit, 0),\n                      //           debit: accRec.debit,\n                      //           credit: accRec.credit,\n                      //         };\n                      //       }\n                      //     })\n                      //     .sort((a, b) => (new Date(a) > new Date(b) ? 1 : -1))\n                      //     .sort((a, b) => (a.index > b.index ? 1 : -1))\n                      //     .reduce((p, c) => {\n                      //       if (c.details?.length) {\n                      //         p.push(\n                      //           ...[\n                      //             c,\n                      //             ...c.details.map((item) => ({\n                      //               createdAt: null,\n                      //               no: null,\n                      //               type: null,\n                      //               accountName: (\n                      //                 <p>\n                      //                   {item.label}: {item.value.toFixed(2)}\n                      //                 </p>\n                      //               ),\n                      //               debit: null,\n                      //               credit: null,\n                      //             })),\n                      //           ]\n                      //         );\n                      //       } else {\n                      //         p.push(c);\n                      //       }\n                      //       return p;\n                      //     }, []);\n                      //   setLedger({\n                      //     account,\n                      //     rows: detailedRows,\n                      //   });\n                      //   setTab(\"ledgers\");\n                      // }\n                    }}\n                  />\n                ))\n              ) : (\n                <p\n                  style={{\n                    marginTop: \"1rem\",\n                    marginBottom: \"1rem\",\n                    textAlign: \"center\",\n                    textWrap: \"balance\",\n                    color: \"#797979\",\n                  }}\n                >\n                  No accounts have been added yet.\n                </p>\n              )}\n            </ul>\n          )}\n          {sidebarTab === \"branches\" && (\n            <Branches addBranch={addBranch} setAddBranch={setAddBranch} />\n          )}\n        </div>\n        <div className={s.innerContent}>\n          <div className=\"flex gap-1 align-center\">\n            <button\n              className=\"btn clear iconOnly\"\n              onClick={() => setOpen(!open)}\n            >\n              <PiTreeViewBold />\n            </button>\n            <Tabs\n              activeTab={tab}\n              tabs={[\n                { label: \"Listing\", value: \"voucherListing\" },\n                // { label: \"Ledgers\", value: \"ledgers\" },\n                // { label: \"Accounting Analysys\", value: \"analysys\" },\n              ]}\n              onChange={(tab) => setTab(tab.value)}\n            />\n          </div>\n          {tab === \"voucherListing\" && (\n            <Vouchers vouchers={vouchers} setVouchers={setVouchers} />\n          )}\n          {tab === \"ledgers\" && (\n            <Ledgers account={ledger?.account} rows={ledger?.rows} />\n          )}\n          {tab === \"analysys\" && <Analysys account={analysysAcc} />}\n          {\n            // tab === \"journals\" && <Journals accounts={journalAcc} />\n          }\n        </div>\n      </div>\n\n      <Modal\n        open={addMaster}\n        head\n        label={`${addMaster?._id ? \"Update\" : \"Add\"} Account`}\n        className={s.masterFormModal}\n        setOpen={() => {\n          setAddMaster(null);\n        }}\n      >\n        <MasterForm\n          edit={addMaster}\n          masters={masters}\n          onSuccess={() => {\n            getMasters({ query: { isGroup: \"true\" } })\n              .then(({ data }) => {\n                if (data.success) {\n                  return setMasters(data.data);\n                }\n              })\n              .catch((err) => Prompt({ type: \"error\", message: err.message }));\n            setAddMaster(false);\n          }}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nconst Branches = ({ addBranch, setAddBranch }) => {\n  const [branches, setBranches] = useState([]);\n  const { get: getBranches } = useFetch(endpoints.inventoryBranches);\n  useEffect(() => {\n    getBranches()\n      .then(({ data }) => {\n        if (data.success) {\n          setBranches(data.data);\n        } else {\n          Prompt({ type: \"error\", message: data.message });\n        }\n      })\n      .catch((err) => Prompt({ type: \"error\", message: err.message }));\n  }, []);\n  return (\n    <>\n      <ul>\n        {branches.map((branch) => (\n          <li key={branch._id} className={s.listItem}>\n            {\n              <div className={s.label}>\n                <strong>{branch.name}</strong>\n                <div className={s.btns}>\n                  <button\n                    className={s.addButton}\n                    onClick={() => setAddBranch(branch)}\n                  >\n                    <FiEdit3 />\n                  </button>\n                </div>\n              </div>\n            }\n          </li>\n        ))}\n        {branches.length === 0 && (\n          <p className=\"text-center m-2\">No branch has been added yet.</p>\n        )}\n      </ul>\n      <Modal\n        open={addBranch}\n        head\n        label={`${addBranch?._id ? \"Update\" : \"Add\"} Branch`}\n        className={s.masterFormModal}\n        setOpen={() => {\n          setAddBranch(null);\n        }}\n      >\n        <BranchForm\n          edit={addBranch}\n          onSuccess={(newBranch) => {\n            if (addBranch?._id) {\n              setBranches((prev) =>\n                prev.map((b) => (b._id === newBranch._id ? newBranch : b))\n              );\n            } else {\n              setBranches((prev) => [...prev, newBranch]);\n            }\n            setAddBranch(false);\n          }}\n        />\n      </Modal>\n    </>\n  );\n};\n\nconst Vouchers = ({ vouchers, setVouchers }) => {\n  const [filters, setFilters] = useState({});\n  const voucherTableRef = useRef();\n\n  const { get: getVouchers } = useFetch(endpoints.inventoryListing);\n\n  useEffect(() => {\n    getVouchers({ query: filters })\n      .then(({ data }) => {\n        if (data.success) {\n          setVouchers(data.data);\n        } else {\n          Prompt({ type: \"error\", message: data.message });\n        }\n      })\n      .catch((err) => Prompt({ type: \"error\", message: err.message }));\n  }, [filters]);\n\n  return (\n    <div className={s.innerContentWrapper}>\n      <VoucherFilters filters={filters} setFilters={setFilters} />\n      <Table\n        ref={voucherTableRef}\n        countRecord={() =>\n          vouchers.reduce(\n            (p, c, i, arr) => p + (arr[i - 1]?.rec_id !== c.rec_id ? 1 : 0),\n            0\n          )\n        }\n        className={s.vouchers}\n        columns={[\n          { label: \"Date\" },\n          { label: \"No\" },\n          { label: \"Type\" },\n          { label: \"Account Name\" },\n          { label: \"Outward\", className: \"text-right\" },\n          { label: \"Inward\", className: \"text-right\" },\n          // { label: \"Action\" },\n        ]}\n        tfoot={() => (\n          <tfoot>\n            <tr className={s.footer}>\n              <td />\n              <td />\n              <td />\n              <td className=\"text-right\">Total</td>\n              <td className=\"text-right\">\n                {vouchers.reduce((p, c) => p + c.outward, 0).toFixed(2)}\n              </td>\n              <td className=\"text-right\">\n                {vouchers.reduce((p, c) => p + c.inward, 0).toFixed(2)}\n              </td>\n            </tr>\n          </tfoot>\n        )}\n      >\n        {vouchers.map((row, i, arr) => (\n          <tr key={i}>\n            <td className=\"grid\">\n              {arr[i - 1]?.rec_id !== row.rec_id && (\n                <>\n                  <Moment style={{ fontSize: \"14px\" }} format=\"DD MMM YYYY\">\n                    {row.createdAt}\n                  </Moment>\n                  <Moment format=\"hh:mma\">{row.createdAt}</Moment>\n                </>\n              )}\n            </td>\n            <td>{arr[i - 1]?.rec_id !== row.rec_id && row.no}</td>\n            <td>{arr[i - 1]?.rec_id !== row.rec_id && row.type}</td>\n            <td>{row.accountName}</td>\n            <td className=\"text-right\">\n              {row.outward ? row.outward.toFixed(2) : null}\n            </td>\n            <td className=\"text-right\">\n              {row.inward ? row.inward.toFixed(2) : null}\n            </td>\n          </tr>\n        ))}\n      </Table>\n    </div>\n  );\n};\n\nconst Ledgers = ({ account, rows }) => {\n  return (\n    <div className={s.innerContentWrapper}>\n      {rows?.length > 0 ? (\n        <>\n          <p\n            style={{ fontWeight: \"600\", fontSize: \"1.2em\" }}\n            className=\"mt-1 pl_5\"\n          >\n            {account.name}\n          </p>\n          <Table\n            className={s.vouchers}\n            columns={[\n              { label: \"Date\" },\n              { label: \"No\" },\n              { label: \"Type\" },\n              { label: \"Account Name\" },\n              { label: \"Debit\", className: \"text-right\" },\n              { label: \"Credit\", className: \"text-right\" },\n            ]}\n            tfoot={\n              <tfoot style={{ marginTop: \"0\" }}>\n                <tr className={s.footer}>\n                  <td />\n                  <td />\n                  <td />\n                  <td className=\"text-right\">Total</td>\n                  <td className=\"text-right\">\n                    {rows.reduce((p, c) => p + c.outward, 0).toFixed(2)}\n                  </td>\n                  <td className=\"text-right\">\n                    {rows.reduce((p, c) => p + c.inward, 0).toFixed(2)}\n                  </td>\n                </tr>\n              </tfoot>\n            }\n          >\n            {rows.map((row, i, arr) => {\n              return (\n                <tr key={i}>\n                  <td className=\"grid\">\n                    {row.createdAt && arr[i - 1]?.rec_id !== row.rec_id && (\n                      <>\n                        <Moment\n                          style={{ fontSize: \"14px\" }}\n                          format=\"DD MMM YYYY\"\n                        >\n                          {row.createdAt}\n                        </Moment>\n                        <Moment format=\"hh:mma\">{row.createdAt}</Moment>\n                      </>\n                    )}\n                  </td>\n                  <td>{arr[i - 1]?.rec_id !== row.rec_id && row.no}</td>\n                  <td>{arr[i - 1]?.rec_id !== row.rec_id && row.type}</td>\n                  <td className=\"grid\">\n                    {row.details?.length > 0 ? \"Details:\" : row.accountName}\n                  </td>\n                  <td className=\"text-right\">\n                    {row.debit ? row.debit.toFixed(2) : null}\n                  </td>\n                  <td className=\"text-right\">\n                    {row.credit ? row.credit.toFixed(2) : null}\n                  </td>\n                </tr>\n              );\n            })}\n          </Table>\n        </>\n      ) : account ? (\n        <p className={s.analysysPlaceholder}>\n          No records found for <strong>{account.name}</strong>.\n        </p>\n      ) : (\n        <p className={s.analysysPlaceholder}>No account has been selected.</p>\n      )}\n    </div>\n  );\n};\n\nconst Analysys = ({ account }) => {\n  const [months, setMonths] = useState([]);\n  const [data, setData] = useState([]);\n  const [calculation, setCalculation] = useState(\"sum_debit\");\n  const { get, loading } = useFetch(endpoints.accountingMonthlyAnalysys);\n  useEffect(() => {\n    if (account) {\n      setCalculation(\n        [\"Liabilities\", \"Income\"].includes(account?.name)\n          ? \"sum_credit\"\n          : \"sum_debit\"\n      );\n      get({ query: { accountId: account._id } })\n        .then(({ data }) => {\n          if (data.success) {\n            setData(data.data);\n            setMonths(data.months);\n          } else {\n            Prompt({ type: \"error\", message: data.message });\n          }\n        })\n        .catch((err) => Prompt({ type: \"error\", message: err.message }));\n    } else {\n      setData([]);\n      setMonths([]);\n    }\n  }, [account]);\n  return (\n    <div className={s.innerContentWrapper}>\n      {account ? (\n        <div>\n          <div className=\"mt-1 flex gap-2 align-center\">\n            <p\n              style={{ fontWeight: \"600\", fontSize: \"1.2em\" }}\n              className=\"pl_5\"\n            >\n              {account.name}\n            </p>\n            <div className=\"flex gap-2\">\n              <label className=\"flex align-center gap_5\">\n                <input\n                  name=\"calculation\"\n                  type=\"radio\"\n                  value=\"sum_debit\"\n                  checked={calculation === \"sum_debit\"}\n                  onChange={(e) => setCalculation(e.target.value)}\n                />\n                Sum Of Debits\n              </label>\n              <label className=\"flex align-center gap_5\">\n                <input\n                  name=\"calculation\"\n                  type=\"radio\"\n                  value=\"sum_credit\"\n                  checked={calculation === \"sum_credit\"}\n                  onChange={(e) => setCalculation(e.target.value)}\n                />\n                Sum Of Credit\n              </label>\n              <label className=\"flex align-center gap_5\">\n                <input\n                  name=\"calculation\"\n                  type=\"radio\"\n                  value=\"net\"\n                  onChange={(e) => setCalculation(e.target.value)}\n                />\n                Net\n              </label>\n              <label className=\"flex align-center gap_5\">\n                <input\n                  name=\"calculation\"\n                  type=\"radio\"\n                  value=\"balance\"\n                  onChange={(e) => setCalculation(e.target.value)}\n                />\n                Balance\n              </label>\n            </div>\n          </div>\n          <Table\n            loading={loading}\n            className={s.analysys}\n            columns={[\n              { label: account.name },\n              ...(months || []).map((item) => ({\n                label: item.label,\n                className: \"text-right\",\n              })),\n            ]}\n            tfoot={\n              <tfoot style={{ marginTop: \"0\" }}>\n                <tr\n                  className={s.footer}\n                  style={{\n                    borderTop: \"1px solid #979797\",\n                    padding: \"0 0.5rem\",\n                    paddingTop: \"1rem\",\n                  }}\n                >\n                  <td>Total</td>\n                  {(months || []).map((month, i) => (\n                    <td key={i} className=\"text-right\">\n                      {analyzeAccounts(\n                        calculation,\n                        data.reduce((prev, curr, j) => {\n                          prev.push(...curr.entries[i]);\n                          return prev;\n                        }, [])\n                      )}\n                    </td>\n                  ))}\n                </tr>\n              </tfoot>\n            }\n          >\n            {(data || []).map((row, i, arr) => {\n              return (\n                <tr key={i}>\n                  <td className=\"grid\">{row.name}</td>\n                  {(months || []).map((month, i) => (\n                    <td key={i} className=\"text-right\">\n                      {analyzeAccounts(\n                        calculation,\n                        row.entries[i],\n                        row.openingBalance\n                      )}\n                    </td>\n                  ))}\n                </tr>\n              );\n            })}\n          </Table>\n        </div>\n      ) : (\n        <p className={s.analysysPlaceholder}>No group has been selected.</p>\n      )}\n    </div>\n  );\n};\n\nconst analyzeAccounts = (calculation, entries, openingBalance = 0) => {\n  let result = null;\n  if (calculation === \"sum_debit\") {\n    result = entries.reduce((p, c) => p + c.debit, 0);\n  } else if (calculation === \"sum_credit\") {\n    result = entries.reduce((p, c) => p + c.credit, 0);\n  } else if (calculation === \"net\") {\n    result = entries.reduce((p, c) => p + c.debit - c.credit, 0);\n  } else if (calculation === \"balance\") {\n    result =\n      entries.reduce((p, c) => p + c.debit - c.credit, 0) + openingBalance;\n    // return;\n  }\n  return result.toFixed(2);\n};\n\nexport default Accounting;\n"],"names":["mainSchema","yup","name","required","edit","onSuccess","useForm","resolver","useYup","handleSubmit","register","reset","errors","formState","useFetch","endpoints","_id","createMaster","post","updateMaster","put","loading","useEffect","onSubmit","values","then","data","success","Prompt","type","message","catch","err","className","s","label","error","disabled","isGroup","parent","when","is","schema","otherwise","masters","useState","entries","setEntries","control","setValue","setError","watch","clearErrors","openingStocks","length","forEach","entry","i","branch","openingStock","cost","reorderQty","entries_0_branch","entries_0_openingStock","entries_0_cost","entries_0_reorderQty","Math","random","toString","some","amount","payload","map","formOptions","placeholder","options","value","item","url","getQuery","v","handleData","onChange","opt","prev","e","target","onClick","filter","accountId","debit","credit","filters","setFilters","startDate","endDate","AccountNode","account","setAddMaster","activeGroup","activeLeaf","activeLeavs","children","setChildren","open","setOpen","getMasters","get","totalChildren","query","style","whiteSpace","height","width","border","borderRadius","pointerEvents","includes","child","Branches","addBranch","setAddBranch","branches","setBranches","getBranches","head","BranchForm","newBranch","b","Vouchers","vouchers","setVouchers","voucherTableRef","useRef","getVouchers","ref","countRecord","reduce","p","c","arr","rec_id","columns","tfoot","outward","toFixed","inward","row","fontSize","format","createdAt","no","accountName","Ledgers","rows","fontWeight","marginTop","details","Analysys","months","setMonths","setData","calculation","setCalculation","checked","borderTop","padding","paddingTop","month","analyzeAccounts","curr","j","push","openingBalance","result","setSidebarOpen","addMaster","setMasters","tab","setTab","sidebarTab","setSidebarTab","analysysAcc","ledger","journalAcc","treeData","useMemo","accounts","accountMap","tree","buildTree","activeTab","tabs","acc","marginBottom","textAlign","textWrap","color","MasterForm"],"sourceRoot":""}