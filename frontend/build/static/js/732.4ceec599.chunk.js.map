{"version":3,"file":"static/js/732.4ceec599.chunk.js","mappings":"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","sources":["webpack://cash-app/./src/Views/Dashboard/Journals/payments.module.scss?ad65","Views/Dashboard/Journals/PaymentForm.js","Views/Dashboard/Journals/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"payments_content__KwuWi\",\"payments\":\"payments_payments__4KMLq\",\"addPaymentFormModal\":\"payments_addPaymentFormModal__nh8z9\",\"addPaymentForm\":\"payments_addPaymentForm__nSugk\",\"entryForm\":\"payments_entryForm__qUJci\",\"head\":\"payments_head__AhgB9\",\"purchaseTable\":\"payments_purchaseTable__o8ZKD\",\"date\":\"payments_date__OD-Nt\",\"customer\":\"payments_customer__b5fUx\",\"net\":\"payments_net__iRS-k\",\"actions\":\"payments_actions__rjIfS\",\"mainForm\":\"payments_mainForm__e9GN3\",\"mainFormWrapper\":\"payments_mainFormWrapper__EAYy8\"};","import { useState, useEffect, useCallback } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Input, Select, Combobox } from \"Components/elements\";\nimport { useYup, useFetch } from \"hooks\";\nimport { Prompt } from \"Components/modal\";\nimport * as yup from \"yup\";\nimport s from \"./payments.module.scss\";\nimport { endpoints } from \"config\";\nimport { RiCloseLargeFill } from \"react-icons/ri\";\n\nconst Form = ({ edit, onSuccess }) => {\n  const [entries, setEntries] = useState([]);\n  const {\n    handleSubmit,\n    register,\n    reset,\n    control,\n    setFocus,\n    setValue,\n    setError,\n    clearErrors,\n    formState: { errors },\n  } = useForm();\n\n  const {\n    post: saveEntries,\n    put: updateEntry,\n    loading,\n  } = useFetch(endpoints.journals + `/${edit?._id || \"\"}`);\n\n  const submitForm = useCallback(\n    (values) => {\n      if (\n        entries.some((entry, i) => {\n          if (\n            entry.accountId &&\n            ((entry.type === \"credit\" && entry.credit) ||\n              (entry.type === \"debit\" && entry.debit))\n          ) {\n            return false;\n          }\n          if (!entry.type) {\n            setError(`entries_${i}_type`, {\n              type: \"custom\",\n              message: \"Please select a type.\",\n            });\n          } else {\n            if (entry.type === \"debit\" && !entry.debit) {\n              setError(`entries_${i}_debit`, {\n                type: \"custom\",\n                message: \"Please enter debit.\",\n              });\n            } else if (entry.type === \"credit\" && !entry.credit) {\n              setError(`entries_${i}_credit`, {\n                type: \"custom\",\n                message: \"Please enter credit.\",\n              });\n            }\n          }\n          if (!entry.accountId) {\n            setError(`entries_${i}_accountId`, {\n              type: \"custom\",\n              message: \"Please select an account.\",\n            });\n          }\n          return true;\n        })\n      ) {\n        return;\n      }\n\n      (edit\n        ? updateEntry({\n            accountId: values.entries_0_accountId,\n            credit: +values.entries_0_credit || 0,\n            debit: +values.entries_0_debit || 0,\n          })\n        : saveEntries({\n            entries: entries.map((entry) => ({\n              accountId: entry.accountId,\n              debit: +entry.debit || 0,\n              credit: +entry.credit || 0,\n            })),\n          })\n      )\n        .then(({ data }) => {\n          if (!data.success) {\n            return Prompt({ type: \"error\", message: data.message });\n          }\n          onSuccess(data.data);\n        })\n        .catch((err) => Prompt({ type: \"error\", message: err.message }));\n    },\n    [entries]\n  );\n\n  useEffect(() => {\n    reset({\n      entries_0_type: edit?.debit > edit?.credit ? \"debit\" : \"credit\",\n      entries_0_accountId: edit?.accountId || \"\",\n      entries_0_debit: edit?.debit || \"\",\n      entries_0_credit: edit?.credit || \"\",\n    });\n    setEntries([\n      {\n        _id: edit?._id || Math.random().toString(36),\n        type: edit?.debit > edit?.credit ? \"debit\" : \"credit\",\n        accountId: edit?.accountId || \"\",\n        debit: edit?.debit || \"\",\n        credit: edit?.credit || \"\",\n      },\n    ]);\n  }, [edit]);\n\n  return (\n    <div className={`grid gap-1 p-1 ${s.addPaymentForm}`}>\n      <h3>Entries</h3>\n\n      <div className={`${s.mainForm} grid gap-1`}>\n        <form\n          className={`${s.mainFormWrapper} grid gap-1 all-columns`}\n          onSubmit={handleSubmit(submitForm)}\n        >\n          {/* <Input\n          label=\"Date\"\n          type=\"date\"\n          {...register(\"date\")}\n          required\n          error={errors.date}\n        /> */}\n\n          {(entries || []).map((entry, i) => (\n            <div key={entry._id} className={s.entryForm}>\n              <Combobox\n                label=\"Type\"\n                control={control}\n                name={`entries_${i}_type`}\n                formOptions={{ required: true }}\n                options={[\n                  { label: \"Credit\", value: \"credit\" },\n                  { label: \"Debit\", value: \"debit\" },\n                ]}\n                onChange={(opt) => {\n                  if (opt.value === \"credit\") {\n                    clearErrors(`entries_${i}_debit`);\n                  } else {\n                    clearErrors(`entries_${i}_credit`);\n                  }\n                  setEntries((prev) =>\n                    prev.map((item) =>\n                      item._id === entry._id\n                        ? { ...item, type: opt.value }\n                        : item\n                    )\n                  );\n                }}\n              />\n              <Select\n                label=\"Account\"\n                control={control}\n                name={`entries_${i}_accountId`}\n                formOptions={{ required: true }}\n                url={endpoints.accountingMasters}\n                getQuery={(v) => ({\n                  isGroup: \"false\",\n                  name: v || \"\",\n                })}\n                handleData={(data) => ({\n                  label: `${data.name}${data.type ? ` - ${data.type}` : \"\"}`,\n                  value: data._id,\n                  account: data,\n                })}\n                onChange={(opt) => {\n                  setEntries((prev) =>\n                    prev.map((item) =>\n                      item._id === entry._id\n                        ? { ...item, accountId: opt.value }\n                        : item\n                    )\n                  );\n                  setFocus(`entries_${i}_${entry.type}`);\n                }}\n              />\n              <Input\n                label=\"Debit\"\n                type=\"number\"\n                step=\"0.01\"\n                required\n                disabled={entry.type === \"credit\"}\n                {...register(`entries_${i}_debit`)}\n                onChange={(e) => {\n                  clearErrors(`entries_${i}_debit`);\n                  setEntries((prev) =>\n                    prev.map((item) =>\n                      item._id === entry._id\n                        ? { ...item, debit: e.target.value }\n                        : item\n                    )\n                  );\n                }}\n                error={errors[`entries_${i}_debit`]}\n              />\n              <Input\n                label=\"Credit\"\n                type=\"number\"\n                step=\"0.01\"\n                required\n                disabled={entry.type === \"debit\"}\n                {...register(`entries_${i}_credit`)}\n                onChange={(e) => {\n                  clearErrors(`entries_${i}_credit`);\n                  setEntries((prev) =>\n                    prev.map((item) =>\n                      item._id === entry._id\n                        ? { ...item, credit: e.target.value }\n                        : item\n                    )\n                  );\n                }}\n                error={errors[`entries_${i}_credit`]}\n              />\n              {entries.length > 1 && (\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    setEntries((prev) =>\n                      prev.filter((item) => item._id !== entry._id)\n                    )\n                  }\n                  className=\"btn clear iconOnly\"\n                >\n                  <RiCloseLargeFill />\n                </button>\n              )}\n            </div>\n          ))}\n\n          {!loading && !edit && (\n            <button\n              type=\"button\"\n              className=\"btn secondary\"\n              onClick={() => {\n                setValue(`entries_${entries.length}_type`, \"credit\");\n                setEntries((prev) => [\n                  ...prev,\n                  {\n                    _id: Math.random().toString(36),\n                    type: \"credit\",\n                    accountId: \"\",\n                    debit: \"\",\n                    credit: \"\",\n                  },\n                ]);\n              }}\n            >\n              Add More Entry\n            </button>\n          )}\n\n          <div className=\"btns\">\n            <button className=\"btn\" disabled={loading}>\n              {edit ? \"Update\" : \"Submit\"}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Form;\n","import { useState, useEffect, useContext } from \"react\";\nimport { SiteContext } from \"SiteContext\";\nimport { Table, TableActions, Moment } from \"Components/elements\";\nimport { FaRegTrashAlt } from \"react-icons/fa\";\nimport { Prompt, Modal } from \"Components/modal\";\nimport s from \"./payments.module.scss\";\nimport { useFetch } from \"hooks\";\nimport { endpoints } from \"config\";\n\nimport JournalForm from \"./PaymentForm\";\nimport { BsList } from \"react-icons/bs\";\nimport { GoPlus } from \"react-icons/go\";\nimport { FaPencil } from \"react-icons/fa6\";\n\nconst Payments = ({ setSidebarOpen }) => {\n  const { config, checkPermission } = useContext(SiteContext);\n  const [journals, setJournals] = useState([]);\n  const [entry, setEntry] = useState(null);\n  const [addEntry, setAddEntry] = useState(false);\n\n  const { get: getJournals, loading } = useFetch(endpoints.journals);\n  const { remove: deleteEntry } = useFetch(endpoints.journals + \"/{ID}\");\n\n  useEffect(() => {\n    getJournals()\n      .then(({ data }) => {\n        if (data.success) {\n          return setJournals(data.data);\n        }\n      })\n      .catch((err) => Prompt({ type: \"error\", message: err.message }));\n  }, []);\n  return (\n    <div className={`${s.content} grid gap-1 m-a p-1`}>\n      <div className={`flex ${s.head}`}>\n        <div\n          className={`flex align-center pointer gap_5  ml-1`}\n          onClick={() => setSidebarOpen((prev) => !prev)}\n        >\n          <BsList style={{ fontSize: \"1.75rem\" }} />\n          <h2>Journals</h2>\n          {checkPermission(\"journal_create\") && (\n            <button\n              className=\"btn clear iconOnly\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setAddEntry(true);\n              }}\n            >\n              <GoPlus />\n            </button>\n          )}\n        </div>\n      </div>\n      <Table\n        loading={loading}\n        className={s.payments}\n        columns={[\n          { label: \"Date\" },\n          { label: \"Account\" },\n          { label: \"Debit\", className: \"text-right\" },\n          { label: \"Credit\", className: \"text-right\" },\n          { label: \"Action\" },\n        ]}\n      >\n        {journals.map((item) => (\n          <tr\n            onClick={() => {\n              setEntry(item);\n              setAddEntry(true);\n            }}\n            style={{ cursor: \"pointer\" }}\n            key={item._id}\n          >\n            <td className={s.date}>\n              <Moment format=\"DD/MM/YYYY\">{item.updatedAt}</Moment>\n            </td>\n            <td className={s.customer}>{item.accountName}</td>\n            <td className=\"text-right\">\n              {item.debit\n                ? item.debit.toFixed(2, config?.numberSeparator)\n                : null}\n            </td>\n            <td className={`text-right`}>\n              {item.credit ? item.credit.fix(2, config?.numberSeparator) : null}\n            </td>\n            <TableActions\n              className={s.actions}\n              actions={[\n                {\n                  icon: <FaPencil />,\n                  label: \"Edit\",\n                  onClick: () => {\n                    setEntry(item);\n                    setAddEntry(true);\n                  },\n                },\n                ...(checkPermission(\"journal_delete\")\n                  ? [\n                      {\n                        icon: <FaRegTrashAlt />,\n                        label: \"Delete\",\n                        onClick: () =>\n                          Prompt({\n                            type: \"confirmation\",\n                            message: `Are you sure you want to remove this entry?`,\n                            callback: () => {\n                              deleteEntry(\n                                {},\n                                { params: { \"{ID}\": item._id } }\n                              ).then(({ data }) => {\n                                if (data.success) {\n                                  setJournals((prev) =>\n                                    prev.filter(\n                                      (entry) => entry._id !== item._id\n                                    )\n                                  );\n                                } else {\n                                  Prompt({\n                                    type: \"error\",\n                                    message: data.message,\n                                  });\n                                }\n                              });\n                            },\n                          }),\n                      },\n                    ]\n                  : []),\n              ]}\n            />\n          </tr>\n        ))}\n      </Table>\n      <Modal\n        open={addEntry}\n        head\n        label={`${entry ? \"Update\" : \"Add\"} Journal Entries`}\n        className={s.addPaymentFormModal}\n        setOpen={() => {\n          setEntry(null);\n          setAddEntry(false);\n        }}\n      >\n        <JournalForm\n          edit={entry}\n          payments={journals}\n          onSuccess={(newEntry) => {\n            if (entry) {\n              setJournals((prev) =>\n                prev.map((item) =>\n                  item._id === newEntry._id ? newEntry : item\n                )\n              );\n              setEntry(null);\n            } else {\n              setJournals((prev) => [...prev, ...newEntry]);\n            }\n            setAddEntry(false);\n          }}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default Payments;\n"],"names":["edit","onSuccess","useState","entries","setEntries","useForm","handleSubmit","register","reset","control","setFocus","setValue","setError","clearErrors","errors","formState","useFetch","endpoints","_id","saveEntries","post","updateEntry","put","loading","submitForm","useCallback","values","some","entry","i","accountId","type","credit","debit","message","entries_0_accountId","entries_0_credit","entries_0_debit","map","then","data","success","Prompt","catch","err","useEffect","entries_0_type","Math","random","toString","className","s","onSubmit","label","name","formOptions","required","options","value","onChange","opt","prev","item","url","getQuery","v","isGroup","handleData","account","step","disabled","e","target","error","length","onClick","filter","setSidebarOpen","useContext","SiteContext","config","checkPermission","journals","setJournals","setEntry","addEntry","setAddEntry","getJournals","get","deleteEntry","remove","style","fontSize","stopPropagation","columns","cursor","format","updatedAt","accountName","toFixed","numberSeparator","fix","actions","icon","callback","params","open","head","setOpen","payments","newEntry"],"sourceRoot":""}