{"version":3,"file":"static/js/977.64268765.chunk.js","mappings":"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","sources":["webpack://cash-app/./src/Views/Dashboard/Inventory/quotes.module.scss?4ca7","Views/Dashboard/Inventory/BranchForm.js","Views/Dashboard/Inventory/MasterForm.js","Views/Dashboard/Inventory/Filters.js","Views/Dashboard/Inventory/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"quotes_content__niBb4\",\"innerWrapper\":\"quotes_innerWrapper__eqA-i\",\"sidebar\":\"quotes_sidebar__J-8f3\",\"addButton\":\"quotes_addButton__u9EdI\",\"btns\":\"quotes_btns__4+XC2\",\"listItem\":\"quotes_listItem__WD70k\",\"label\":\"quotes_label__KbFIm\",\"accountName\":\"quotes_accountName__7d1uP\",\"highlight\":\"quotes_highlight__oAB8h\",\"nestedList\":\"quotes_nestedList__hnP2n\",\"open\":\"quotes_open__1j-GY\",\"innerContent\":\"quotes_innerContent__AASR0\",\"innerContentWrapper\":\"quotes_innerContentWrapper__wL0J2\",\"vouchers\":\"quotes_vouchers__B6a0g\",\"footer\":\"quotes_footer__NlFGZ\",\"ledgers\":\"quotes_ledgers__uY7N8\",\"closing\":\"quotes_closing__wlH0o\",\"analysysPlaceholder\":\"quotes_analysysPlaceholder__WFSHT\",\"entryForm\":\"quotes_entryForm__oFShb\",\"voucherFilters\":\"quotes_voucherFilters__Mobw4\",\"masterFormModal\":\"quotes_masterFormModal__mLMGL\",\"masterForm\":\"quotes_masterForm__peHJD\",\"head\":\"quotes_head__x3HSY\"};","import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Input } from \"Components/elements\";\nimport { useYup, useFetch } from \"hooks\";\nimport { Prompt } from \"Components/modal\";\nimport * as yup from \"yup\";\nimport s from \"./quotes.module.scss\";\nimport { endpoints } from \"config\";\n\nconst mainSchema = yup.object({\n  name: yup.string().required(\"Please enter a name\"),\n});\n\nconst Form = ({ edit, onSuccess }) => {\n  const {\n    handleSubmit,\n    register,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: useYup(mainSchema),\n  });\n\n  const {\n    post: createMaster,\n    put: updateMaster,\n    loading,\n  } = useFetch(endpoints.inventoryBranches + `/${edit?._id || \"\"}`);\n\n  useEffect(() => {\n    reset({\n      name: edit?.name || \"\",\n    });\n  }, [edit]);\n  return (\n    <form\n      onSubmit={handleSubmit((values) => {\n        (edit?._id ? updateMaster : createMaster)({\n          name: values.name,\n        })\n          .then(({ data }) => {\n            if (!data.success) {\n              return Prompt({ type: \"error\", message: data.message });\n            }\n            onSuccess(data.data);\n          })\n          .catch((err) => Prompt({ type: \"error\", message: err.message }));\n      })}\n      className={`${s.masterForm} grid gap-1`}\n    >\n      <Input label=\"Name\" {...register(\"name\")} required error={errors.name} />\n\n      <div className=\"btns\">\n        <button className=\"btn\" disabled={loading}>\n          {edit?._id ? \"Update\" : \"Submit\"}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Input, Select, Combobox } from \"Components/elements\";\nimport { useYup, useFetch } from \"hooks\";\nimport { Prompt } from \"Components/modal\";\nimport * as yup from \"yup\";\nimport s from \"./quotes.module.scss\";\nimport { endpoints } from \"config\";\nimport { RiCloseLargeFill } from \"react-icons/ri\";\n\nconst mainSchema = yup.object({\n  name: yup.string().required(\"Please enter a name\"),\n  isGroup: yup.boolean().required(),\n  parent: yup.string().when(\"isGroup\", {\n    is: false,\n    then: (schema) => schema.required(\"Please select a group.\"),\n    otherwise: (schema) => schema,\n  }),\n  // type: yup\n  //   .string()\n  //   .oneOf([\n  //     \"Cash\",\n  //     \"Bank\",\n  //     \"Customers\",\n  //     \"Suppliers\",\n  //     \"Sales\",\n  //     \"Purchase\",\n  //     \"Stock\",\n  //     \"null\",\n  //     \"Tax\",\n  //     null,\n  //   ])\n  //   .nullable(),\n});\n\nconst Form = ({ edit, masters = [], onSuccess }) => {\n  const [entries, setEntries] = useState([]);\n  const {\n    handleSubmit,\n    register,\n    reset,\n    control,\n    setValue,\n    setError,\n    watch,\n    clearErrors,\n    formState: { errors },\n  } = useForm({\n    resolver: useYup(mainSchema),\n  });\n\n  const isGroup = watch(\"isGroup\");\n\n  const {\n    post: createMaster,\n    put: updateMaster,\n    loading,\n  } = useFetch(endpoints.inventoryMasters + `/${edit?._id || \"\"}`);\n\n  useEffect(() => {\n    const values = {\n      name: edit?.name || \"\",\n      parent: edit?.parent || \"\",\n      // type: edit?.type || \"null\",\n      isGroup: edit?.isGroup ?? true,\n    };\n    if (edit?.openingStocks?.length) {\n      edit?.openingStocks?.forEach((entry, i) => {\n        values[`entries_${i}_branch`] = entry.branch;\n        values[`entries_${i}_openingStock`] = entry.openingStock;\n        values[`entries_${i}_cost`] = entry.cost;\n        values[`entries_${i}_reorderQty`] = entry.reorderQty;\n      });\n    } else {\n      values.entries_0_branch = \"\";\n      values.entries_0_openingStock = \"\";\n      values.entries_0_cost = \"\";\n      values.entries_0_reorderQty = \"\";\n    }\n    reset(values);\n    setEntries(\n      edit?.openingStocks?.length\n        ? edit?.openingStocks\n        : [\n            {\n              _id: Math.random().toString(36),\n              branch: \"\",\n              openingStock: \"\",\n              reorderQty: \"\",\n            },\n          ]\n    );\n  }, [edit]);\n  return (\n    <form\n      onSubmit={handleSubmit((values) => {\n        if (\n          !values.isGroup &&\n          entries.some((entry, i) => {\n            if (\n              entry.branch &&\n              entry.openingStock &&\n              entry.cost &&\n              entry.reorderQty\n            ) {\n              return false;\n            }\n            if (!entry.branch) {\n              setError(`entries_${i}_branch`, {\n                type: \"custom\",\n                message: \"Name is required.\",\n              });\n            }\n            if (!entry.openingStock) {\n              setError(`entries_${i}_openingStock`, {\n                type: \"custom\",\n                message: \"Stock is required.\",\n              });\n            }\n            if (!entry.cost) {\n              setError(`entries_${i}_cost`, {\n                type: \"custom\",\n                message: \"Cost is required.\",\n              });\n            }\n            if (!entry.reorderQty) {\n              setError(`entries_${i}_reorderQty`, {\n                type: \"custom\",\n                message: \"Reorder QTY is required.\",\n              });\n            }\n            return true;\n          })\n        ) {\n          return;\n        }\n\n        if (!values.parent) {\n          values.parent = null;\n        }\n\n        const payload = {\n          name: values.name,\n          isGroup: values.isGroup,\n          parent: values.parent,\n          type: values.type,\n        };\n        if (!values.isGroup) {\n          payload.openingStocks = entries.map((entry) => ({\n            branch: entry.branch,\n            openingStock: entry.openingStock,\n            cost: entry.cost,\n            reorderQty: entry.reorderQty,\n          }));\n        }\n        (edit?._id ? updateMaster : createMaster)(payload)\n          .then(({ data }) => {\n            if (!data.success) {\n              return Prompt({ type: \"error\", message: data.message });\n            }\n            onSuccess(data.data);\n          })\n          .catch((err) => Prompt({ type: \"error\", message: err.message }));\n      })}\n      className={`${s.masterForm} grid gap-1`}\n    >\n      <Input label=\"Name\" {...register(\"name\")} required error={errors.name} />\n\n      <Combobox\n        label=\"Parent\"\n        name=\"parent\"\n        control={control}\n        formOptions={{ required: !isGroup }}\n        placeholder=\"\"\n        options={[\n          { label: \"None\", value: \"\" },\n          ...masters.map((item) => ({ label: item.name, value: item._id })),\n        ]}\n      />\n\n      <Combobox\n        label=\"Is Group\"\n        name=\"isGroup\"\n        control={control}\n        formOptions={{ required: true }}\n        options={[\n          { label: \"No\", value: false },\n          { label: \"Yes\", value: true },\n        ]}\n      />\n\n      {!isGroup && (\n        <>\n          <h3>Opening Stocks</h3>\n\n          {(entries || []).map((entry, i) => (\n            <div key={entry._id} className={s.entryForm}>\n              <Select\n                label=\"Branch\"\n                control={control}\n                name={`entries_${i}_branch`}\n                formOptions={{ required: true }}\n                url={endpoints.inventoryBranches}\n                getQuery={(v) => ({ name: v })}\n                handleData={(data) => ({\n                  label: data.name,\n                  value: data._id,\n                })}\n                onChange={(opt) => {\n                  clearErrors(`entries_${i}_openingStock`);\n                  setEntries((prev) =>\n                    prev.map((item) =>\n                      item._id === entry._id\n                        ? { ...item, branch: opt.value }\n                        : item\n                    )\n                  );\n                }}\n              />\n              <Input\n                label=\"Opening Stock\"\n                type=\"number\"\n                required\n                {...register(`entries_${i}_openingStock`)}\n                onChange={(e) => {\n                  clearErrors(`entries_${i}_openingStock`);\n                  setEntries((prev) =>\n                    prev.map((item) =>\n                      item._id === entry._id\n                        ? { ...item, openingStock: e.target.value }\n                        : item\n                    )\n                  );\n                }}\n                error={errors[`entries_${i}_openingStock`]}\n              />\n              <Input\n                label=\"Cost\"\n                type=\"number\"\n                required\n                {...register(`entries_${i}_cost`)}\n                onChange={(e) => {\n                  clearErrors(`entries_${i}_cost`);\n                  setEntries((prev) =>\n                    prev.map((item) =>\n                      item._id === entry._id\n                        ? { ...item, cost: e.target.value }\n                        : item\n                    )\n                  );\n                }}\n                error={errors[`entries_${i}_cost`]}\n              />\n              <Input\n                label=\"Reorder QTY\"\n                type=\"number\"\n                required\n                {...register(`entries_${i}_reorderQty`)}\n                onChange={(e) => {\n                  clearErrors(`entries_${i}_reorderQty`);\n                  setEntries((prev) =>\n                    prev.map((item) =>\n                      item._id === entry._id\n                        ? { ...item, reorderQty: e.target.value }\n                        : item\n                    )\n                  );\n                }}\n                error={errors[`entries_${i}_reorderQty`]}\n              />\n\n              {entries?.length > 1 && (\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    setEntries((prev) =>\n                      prev.filter((item) => item._id !== entry._id)\n                    )\n                  }\n                  className=\"btn clear iconOnly\"\n                >\n                  <RiCloseLargeFill />\n                </button>\n              )}\n            </div>\n          ))}\n\n          {!loading && (\n            <button\n              type=\"button\"\n              className=\"btn secondary\"\n              onClick={() => {\n                setValue(`entries_${entries.length}_type`, \"credit\");\n                setEntries((prev) => [\n                  ...prev,\n                  {\n                    _id: Math.random().toString(36),\n                    type: \"credit\",\n                    accountId: \"\",\n                    debit: \"\",\n                    credit: \"\",\n                  },\n                ]);\n              }}\n            >\n              Add More Stock\n            </button>\n          )}\n        </>\n      )}\n\n      <div className=\"btns\">\n        <button className=\"btn\" disabled={loading}>\n          {edit?._id ? \"Update\" : \"Submit\"}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import { useForm } from \"react-hook-form\";\nimport { Input, Combobox, moment } from \"Components/elements\";\nimport s from \"./quotes.module.scss\";\nimport { useContext, useState } from \"react\";\nimport { SiteContext } from \"SiteContext\";\n\nexport const VoucherFilters = ({ filters, setFilters }) => {\n  const { finPeriod } = useContext(SiteContext);\n  const {\n    handleSubmit,\n    register,\n    reset,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <form\n      onSubmit={handleSubmit((values) => {\n        const filters = {};\n        if (values.type) {\n          filters.type = values.type;\n        }\n        if (values.startDate && values.endDate) {\n          filters.startDate = values.startDate;\n          filters.endDate = values.endDate;\n        }\n        setFilters(filters);\n      })}\n      className={`${s.voucherFilters} grid gap-1`}\n    >\n      <Combobox\n        label=\"Type\"\n        name=\"type\"\n        control={control}\n        options={[\n          { label: \"Invoice\", value: \"Invoice\" },\n          { label: \"Sales Return\", value: \"Sales Return\" },\n          { label: \"Purchase\", value: \"Purchase\" },\n          { label: \"Purchase Return\", value: \"Purchase Return\" },\n        ]}\n      />\n\n      <Input\n        label=\"Start Date\"\n        type=\"date\"\n        {...register(\"startDate\")}\n        {...(finPeriod && {\n          min: moment(finPeriod.startDate, \"YYYY-MM-DD\"),\n        })}\n        {...(finPeriod && {\n          max: moment(finPeriod.endDate, \"YYYY-MM-DD\"),\n        })}\n        required\n        error={errors.startDate}\n      />\n      <Input\n        label=\"End Date\"\n        type=\"date\"\n        {...register(\"endDate\")}\n        {...(finPeriod && { min: moment(finPeriod.startDate, \"YYYY-MM-DD\") })}\n        {...(finPeriod && { max: moment(finPeriod.endDate, \"YYYY-MM-DD\") })}\n        required\n        error={errors.endDate}\n      />\n\n      <div className=\"flex gap-1\">\n        <button className=\"btn\">Search</button>\n        <button\n          className=\"btn secondary\"\n          type=\"button\"\n          onClick={() => {\n            reset();\n            setFilters({});\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport const AnalysysFilters = ({ filters, setFilters }) => {\n  const { finPeriod } = useContext(SiteContext);\n  const {\n    handleSubmit,\n    register,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  return (\n    <form\n      onSubmit={handleSubmit((values) => {\n        const filters = {};\n        if (values.type) {\n          filters.type = values.type;\n        }\n        if (values.startDate && values.endDate) {\n          filters.startDate = values.startDate;\n          filters.endDate = values.endDate;\n        }\n        setFilters(filters);\n      })}\n      className={`${s.voucherFilters} grid gap-1`}\n    >\n      <Input\n        label=\"Start Date\"\n        type=\"date\"\n        {...register(\"startDate\")}\n        // {...(finPeriod && { min: moment(finPeriod.startDate, \"YYYY-MM-DD\") })}\n        // {...(finPeriod && { max: moment(finPeriod.endDate, \"YYYY-MM-DD\") })}\n        required\n        error={errors.startDate}\n      />\n      <Input\n        label=\"End Date\"\n        type=\"date\"\n        {...register(\"endDate\")}\n        // {...(finPeriod && { min: moment(finPeriod.startDate, \"YYYY-MM-DD\") })}\n        // {...(finPeriod && { max: moment(finPeriod.endDate, \"YYYY-MM-DD\") })}\n        required\n        error={errors.endDate}\n      />\n\n      <div className=\"flex gap-1\">\n        <button className=\"btn\">Search</button>\n        <button\n          className=\"btn secondary\"\n          type=\"button\"\n          onClick={() => {\n            reset();\n            setFilters({});\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    </form>\n  );\n};\n","import { useState, useEffect, useMemo, useRef } from \"react\";\nimport { Table, Moment, Tabs, Combobox } from \"Components/elements\";\nimport { Prompt, Modal } from \"Components/modal\";\nimport s from \"./quotes.module.scss\";\nimport { useFetch } from \"hooks\";\nimport { endpoints } from \"config\";\n\nimport BranchForm from \"./BranchForm\";\nimport MasterForm from \"./MasterForm\";\nimport {\n  BsDashSquare,\n  BsFillPlusSquareFill,\n  BsList,\n  BsPlusSquare,\n} from \"react-icons/bs\";\nimport { FiEdit3 } from \"react-icons/fi\";\nimport { PiTreeViewBold } from \"react-icons/pi\";\nimport { CgSpinner } from \"react-icons/cg\";\nimport { VoucherFilters, AnalysysFilters } from \"./Filters\";\nimport { useForm } from \"react-hook-form\";\n\nconst buildTree = (accounts) => {\n  const accountMap = {};\n  accounts.forEach((account) => {\n    account.children = [];\n    accountMap[account._id] = account;\n  });\n\n  const tree = [];\n\n  accounts.forEach((account) => {\n    if (account.parent) {\n      const parent = accountMap[account.parent];\n      if (parent) {\n        parent.children.push(account);\n      }\n    } else {\n      tree.push(account);\n    }\n  });\n\n  return tree;\n};\n\nconst AccountNode = ({\n  account,\n  setAddMaster,\n  activeGroup,\n  activeLeaf,\n  activeLeavs = [],\n  onClick = () => {},\n}) => {\n  const [children, setChildren] = useState([]);\n  const [open, setOpen] = useState(false);\n  const { get: getMasters, loading } = useFetch(endpoints.inventoryMasters);\n\n  useEffect(() => {\n    if (account.children) {\n      if (\n        account.children.length &&\n        account.totalChildren > account.children.length\n      ) {\n        getMasters({ query: { parent: account._id } })\n          .then(({ data }) => {\n            if (data.success) {\n              setChildren(data.data);\n              setOpen(true);\n            } else {\n              Prompt({ type: \"error\", message: data.message });\n            }\n          })\n          .catch((err) => Prompt({ type: \"error\", message: err.message }));\n      } else {\n        setChildren(account.children);\n        setOpen(account?.isGroup ? account.children.length > 0 : false);\n      }\n    }\n  }, [account.children]);\n\n  return (\n    <li style={{ whiteSpace: \"nowrap\" }} className={s.listItem}>\n      <div className={s.label}>\n        {account.isGroup && (\n          <>\n            {(children?.length || account.totalChildren) > 0 ? (\n              <button\n                onClick={() => {\n                  if (children?.length === account.totalChildren) {\n                    setOpen(!open);\n                  } else {\n                    getMasters({ query: { parent: account._id } })\n                      .then(({ data }) => {\n                        if (data.success) {\n                          setChildren(data.data);\n                          setOpen(true);\n                        } else {\n                          Prompt({ type: \"error\", message: data.message });\n                        }\n                      })\n                      .catch((err) =>\n                        Prompt({ type: \"error\", message: err.message })\n                      );\n                  }\n                }}\n              >\n                {loading ? (\n                  <CgSpinner className=\"spin\" />\n                ) : open ? (\n                  <BsDashSquare />\n                ) : (\n                  <BsPlusSquare />\n                )}\n              </button>\n            ) : (\n              <button\n                style={{\n                  height: \"16px\",\n                  width: \"16px\",\n                  // background: \"none\",\n                  border: \"1px dashed #818181\",\n                  borderRadius: \"2px\",\n                  pointerEvents: \"none\",\n                }}\n              />\n            )}\n          </>\n        )}\n        <strong\n          className={`${s.accountName} ${\n            (account.isGroup && activeGroup === account._id) ||\n            (!account.isGroup && activeLeaf === account._id) ||\n            activeLeavs.includes(account._id)\n              ? s.highlight\n              : \"\"\n          }`}\n          onClick={() => {\n            onClick(account);\n          }}\n        >\n          {account.name}\n        </strong>\n        <div className={s.btns}>\n          <button className={s.addButton} onClick={() => setAddMaster(account)}>\n            <FiEdit3 />\n          </button>\n          {account.isGroup && (\n            <button\n              className={s.addButton}\n              onClick={() =>\n                setAddMaster({\n                  parent: account._id,\n                  type: account.type || \"\",\n                  isGroup: false,\n                })\n              }\n            >\n              <BsFillPlusSquareFill />\n            </button>\n          )}\n        </div>\n      </div>\n      {open && children.length > 0 && (\n        <ul\n          className={`${s.nestedList} ${\n            account.isGroup && activeGroup === account._id ? s.highlight : \"\"\n          }`}\n        >\n          {children.map((child) => (\n            <AccountNode\n              key={child._id}\n              activeGroup={activeGroup}\n              activeLeaf={activeLeaf}\n              activeLeavs={activeLeavs}\n              account={child}\n              setAddMaster={setAddMaster}\n              onClick={onClick}\n            />\n          ))}\n        </ul>\n      )}\n    </li>\n  );\n};\n\nconst Accounting = ({ setSidebarOpen }) => {\n  const [addMaster, setAddMaster] = useState(null);\n  const [masters, setMasters] = useState([]);\n  const [tab, setTab] = useState(\"voucherListing\");\n  const [addBranch, setAddBranch] = useState(false);\n  const [sidebarTab, setSidebarTab] = useState(\"accounts\");\n  const [open, setOpen] = useState(true);\n  const [analysysAcc, setAnalysysAcc] = useState(null);\n  const [ledger, setLedger] = useState({});\n  const [vouchers, setVouchers] = useState([]);\n  const [journalAcc, setJournalAcc] = useState([]);\n  const { control, reset } = useForm();\n\n  const { get: getMasters } = useFetch(endpoints.inventoryMasters);\n  const { get: getBranches } = useFetch(endpoints.inventoryBranches);\n\n  const [branches, setBranches] = useState([]);\n  const [branch, setBranch] = useState(null);\n\n  const treeData = useMemo(() => buildTree(masters), [masters]);\n\n  useEffect(() => {\n    getBranches()\n      .then(({ data }) => {\n        if (data.success) {\n          setBranches(data.data);\n          if (data.data.length) {\n            reset({ branch: data.data[0]._id });\n            setBranch(data.data[0]);\n          }\n        } else {\n          Prompt({ type: \"error\", message: data.message });\n        }\n      })\n      .catch((err) => Prompt({ type: \"error\", message: err.message }));\n\n    getMasters({ query: { isGroup: \"true\" } })\n      .then(({ data }) => {\n        if (data.success) {\n          return setMasters(data.data);\n        }\n      })\n      .catch((err) => Prompt({ type: \"error\", message: err.message }));\n  }, []);\n\n  return (\n    <div className={`${s.content} grid gap-1 m-a`}>\n      <div className={`flex ${s.head}`}>\n        <div\n          className={`flex align-center pointer gap_5  ml-1`}\n          onClick={() => setSidebarOpen((prev) => !prev)}\n        >\n          <BsList style={{ fontSize: \"1.75rem\" }} />\n          <h2>Inventory</h2>\n        </div>\n      </div>\n\n      <div className={`${s.innerWrapper} ${open ? s.open : \"\"}`}>\n        <div className={s.sidebar}>\n          <div>\n            <Tabs\n              activeTab={sidebarTab}\n              tabs={[\n                { label: \"Products\", value: \"accounts\" },\n                { label: \"Branches\", value: \"branches\" },\n              ]}\n              onChange={(tab) => setSidebarTab(tab.value)}\n            />\n            <button\n              className={s.addButton}\n              onClick={() => {\n                if (sidebarTab === \"accounts\") {\n                  setAddMaster({});\n                } else if (sidebarTab === \"branches\") {\n                  setAddBranch(true);\n                }\n              }}\n            >\n              <BsFillPlusSquareFill />\n            </button>\n          </div>\n          {sidebarTab === \"accounts\" && (\n            <ul>\n              {masters.length > 0 ? (\n                treeData.map((account) => (\n                  <AccountNode\n                    key={account._id}\n                    account={account}\n                    setAddMaster={setAddMaster}\n                    activeGroup={tab === \"analysys\" ? analysysAcc?._id : null}\n                    activeLeaf={tab === \"ledgers\" ? ledger?.account?._id : null}\n                    activeLeavs={\n                      tab === \"journals\" ? journalAcc.map((acc) => acc._id) : []\n                    }\n                    onClick={(account) => {\n                      if (account.isGroup) {\n                        setAnalysysAcc(account);\n                        setTab(\"analysys\");\n                      } else {\n                        const firstRecords = (vouchers || []).filter(\n                          (item) => item.accountId === account._id\n                        );\n                        const otherRecords = (vouchers || []).filter((item) =>\n                          firstRecords.some((rec) => rec.rec_id === item.rec_id)\n                        );\n                        const allRecords = [\n                          ...firstRecords,\n                          ...otherRecords,\n                        ].filter(\n                          (obj, index, self) =>\n                            index ===\n                            self.findIndex(\n                              (o) =>\n                                o.rec_id === obj.rec_id && o.index === obj.index\n                            )\n                        );\n                        const detailedRows = allRecords.filter(\n                          (row) => row.accountId === account._id\n                        );\n                        // .reduce((p, c) => {\n                        //   const index = p.findIndex((item) =>\n                        //     item.some((row) => row.rec_id === c.rec_id)\n                        //   );\n                        //   if (index === -1) {\n                        //     p.push([c]);\n                        //   } else {\n                        //     p[index].push(c);\n                        //   }\n                        //   return p;\n                        // }, [])\n                        // .map((item) => {\n                        //   const accRec = allRecords.find(\n                        //     (rec) => rec.rec_id === item[0].rec_id\n                        //   );\n                        //   if (item.length <= 1) {\n                        //     return {\n                        //       ...item[0],\n                        //       outward: accRec.outward,\n                        //       inward: accRec.inward,\n                        //     };\n                        //   } else {\n                        //     return {\n                        //       ...item[0],\n                        //       details: item.map((row) => ({\n                        //         label: row.accountName,\n                        //         value: row.inward || row.outward,\n                        //       })),\n                        //       // inward: item.reduce((p, c) => p + c.inward, 0),\n                        //       // outward: item.reduce((p, c) => p + c.outward, 0),\n                        //       outward: accRec.outward,\n                        //       inward: accRec.inward,\n                        //     };\n                        //   }\n                        // })\n                        // .sort((a, b) => (new Date(a) > new Date(b) ? 1 : -1))\n                        // .sort((a, b) => (a.index > b.index ? 1 : -1))\n                        // .reduce((p, c) => {\n                        //   if (c.details?.length) {\n                        //     p.push(\n                        //       ...[\n                        //         c,\n                        //         ...c.details.map((item) => ({\n                        //           createdAt: null,\n                        //           no: null,\n                        //           type: null,\n                        //           accountName: (\n                        //             <p>\n                        //               {item.label}: {item.value.toFixed(2)}\n                        //             </p>\n                        //           ),\n                        //           outward: null,\n                        //           inward: null,\n                        //         })),\n                        //       ]\n                        //     );\n                        //   } else {\n                        //     p.push(c);\n                        //   }\n                        //   return p;\n                        // }, []);\n                        setLedger({\n                          account,\n                          rows: detailedRows,\n                        });\n                        setTab(\"ledgers\");\n                      }\n                    }}\n                  />\n                ))\n              ) : (\n                <p\n                  style={{\n                    marginTop: \"1rem\",\n                    marginBottom: \"1rem\",\n                    textAlign: \"center\",\n                    textWrap: \"balance\",\n                    color: \"#797979\",\n                  }}\n                >\n                  No product have been added yet.\n                </p>\n              )}\n            </ul>\n          )}\n          {sidebarTab === \"branches\" && (\n            <Branches\n              branches={branches}\n              setBranches={setBranches}\n              addBranch={addBranch}\n              setAddBranch={setAddBranch}\n            />\n          )}\n        </div>\n        <div className={s.innerContent}>\n          <div style={{ maxWidth: \"15rem\" }}>\n            <Combobox\n              label=\"Branch\"\n              control={control}\n              name=\"branch\"\n              options={branches.map((b) => ({\n                label: b.name,\n                value: b._id,\n                branch: b,\n              }))}\n              onChange={(opt) => {\n                if (opt?.branch) {\n                  setBranch(opt.branch);\n                }\n              }}\n              className=\"mb-2\"\n            />\n          </div>\n          <div className=\"flex gap-1 align-center\">\n            <button\n              className=\"btn clear iconOnly\"\n              onClick={() => setOpen(!open)}\n            >\n              <PiTreeViewBold />\n            </button>\n            <Tabs\n              activeTab={tab}\n              tabs={[\n                { label: \"Listing\", value: \"voucherListing\" },\n                { label: \"Stock Ledgers\", value: \"ledgers\" },\n                { label: \"Inventory Analysys\", value: \"analysys\" },\n              ]}\n              onChange={(tab) => setTab(tab.value)}\n            />\n          </div>\n          {tab === \"voucherListing\" && (\n            <Vouchers\n              branch={branch}\n              vouchers={vouchers}\n              setVouchers={setVouchers}\n            />\n          )}\n          {tab === \"ledgers\" && (\n            <Ledgers\n              account={ledger?.account}\n              rows={ledger?.rows}\n              branch={branch}\n            />\n          )}\n          {tab === \"analysys\" && (\n            <Analysys branch={branch} account={analysysAcc} />\n          )}\n        </div>\n      </div>\n\n      <Modal\n        open={addMaster}\n        head\n        label={`${addMaster?._id ? \"Update\" : \"Add\"} Account`}\n        className={s.masterFormModal}\n        setOpen={() => {\n          setAddMaster(null);\n        }}\n      >\n        <MasterForm\n          edit={addMaster}\n          masters={masters}\n          onSuccess={() => {\n            getMasters({ query: { isGroup: \"true\" } })\n              .then(({ data }) => {\n                if (data.success) {\n                  return setMasters(data.data);\n                }\n              })\n              .catch((err) => Prompt({ type: \"error\", message: err.message }));\n            setAddMaster({});\n          }}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nconst Branches = ({ branches, setBranches, addBranch, setAddBranch }) => {\n  return (\n    <>\n      <ul>\n        {branches.map((branch) => (\n          <li key={branch._id} className={s.listItem}>\n            {\n              <div className={s.label}>\n                <strong>{branch.name}</strong>\n                <div className={s.btns}>\n                  <button\n                    className={s.addButton}\n                    onClick={() => setAddBranch(branch)}\n                  >\n                    <FiEdit3 />\n                  </button>\n                </div>\n              </div>\n            }\n          </li>\n        ))}\n        {branches.length === 0 && (\n          <p className=\"text-center m-2\">No branch has been added yet.</p>\n        )}\n      </ul>\n      <Modal\n        open={addBranch}\n        head\n        label={`${addBranch?._id ? \"Update\" : \"Add\"} Branch`}\n        className={s.masterFormModal}\n        setOpen={() => {\n          setAddBranch(null);\n        }}\n      >\n        <BranchForm\n          edit={addBranch}\n          onSuccess={(newBranch) => {\n            if (addBranch?._id) {\n              setBranches((prev) =>\n                prev.map((b) => (b._id === newBranch._id ? newBranch : b))\n              );\n            } else {\n              setBranches((prev) => [...prev, newBranch]);\n            }\n            setAddBranch(false);\n          }}\n        />\n      </Modal>\n    </>\n  );\n};\n\nconst Vouchers = ({ branch, vouchers, setVouchers }) => {\n  const [filters, setFilters] = useState({});\n  const voucherTableRef = useRef();\n\n  const { get: getVouchers } = useFetch(endpoints.inventoryListing);\n\n  useEffect(() => {\n    const query = { ...filters };\n    if (branch) {\n      query.branch = branch._id;\n    }\n    getVouchers({ query })\n      .then(({ data }) => {\n        if (data.success) {\n          setVouchers(data.data);\n        } else {\n          Prompt({ type: \"error\", message: data.message });\n        }\n      })\n      .catch((err) => Prompt({ type: \"error\", message: err.message }));\n  }, [filters, branch]);\n\n  return (\n    <div className={s.innerContentWrapper}>\n      <VoucherFilters filters={filters} setFilters={setFilters} />\n      <Table\n        ref={voucherTableRef}\n        countRecord={() =>\n          vouchers.reduce(\n            (p, c, i, arr) => p + (arr[i - 1]?.rec_id !== c.rec_id ? 1 : 0),\n            0\n          )\n        }\n        className={s.vouchers}\n        columns={[\n          { label: \"Date\" },\n          { label: \"No\" },\n          { label: \"Type\" },\n          { label: \"Product Name\" },\n          { label: \"In\", className: \"text-right\" },\n          { label: \"Out\", className: \"text-right\" },\n          // { label: \"Action\" },\n        ]}\n        tfoot={() => (\n          <tfoot>\n            <tr className={s.footer}>\n              <td />\n              <td />\n              <td />\n              <td style={{ fontWeight: \"bold\" }}>Total</td>\n              <td className=\"text-right\">\n                {vouchers.reduce((p, c) => p + c.inward, 0).toFixed(2)}\n              </td>\n              <td className=\"text-right\">\n                {vouchers.reduce((p, c) => p + c.outward, 0).toFixed(2)}\n              </td>\n            </tr>\n          </tfoot>\n        )}\n      >\n        {vouchers.map((row, i, arr) => (\n          <tr key={i}>\n            <td className=\"grid\">\n              {arr[i - 1]?.rec_id !== row.rec_id && (\n                <>\n                  <Moment style={{ fontSize: \"14px\" }} format=\"DD MMM YYYY\">\n                    {row.createdAt}\n                  </Moment>\n                  <Moment format=\"hh:mma\">{row.createdAt}</Moment>\n                </>\n              )}\n            </td>\n            <td>{arr[i - 1]?.rec_id !== row.rec_id && row.no}</td>\n            <td>{arr[i - 1]?.rec_id !== row.rec_id && row.type}</td>\n            <td>{row.accountName}</td>\n            <td className=\"text-right\">\n              {row.inward ? row.inward.toFixed(2) : null}\n            </td>\n            <td className=\"text-right\">\n              {row.outward ? row.outward.toFixed(2) : null}\n            </td>\n          </tr>\n        ))}\n      </Table>\n    </div>\n  );\n};\n\nconst Ledgers = ({ account, branch }) => {\n  const [data, setData] = useState([]);\n  const [openingStock, setOpeningStock] = useState(0);\n  const [filters, setFilters] = useState({});\n  const { get: getLedgers } = useFetch(endpoints.inventoryLedgers);\n\n  useEffect(() => {\n    if (account) {\n      const query = { accountId: account._id };\n      if (branch) {\n        query.branch = branch._id;\n      }\n      if (filters.startDate && filters.endDate) {\n        query.startDate = filters.startDate;\n        query.endDate = filters.endDate;\n      }\n      getLedgers({ query })\n        .then(({ data }) => {\n          if (data.success) {\n            setData(data.data);\n            setOpeningStock(data.openingStock || 0);\n          } else {\n            Prompt({ type: \"error\", message: data.message });\n          }\n        })\n        .catch((err) => Prompt({ type: \"error\", message: err.message }));\n    } else {\n      setData([]);\n    }\n  }, [account, filters, branch]);\n  return (\n    <div className={s.innerContentWrapper}>\n      {account ? (\n        <>\n          <AnalysysFilters filter={filters} setFilters={setFilters} />\n          <p\n            style={{ fontWeight: \"600\", fontSize: \"1.2em\" }}\n            className=\"mt-1 pl_5\"\n          >\n            {account.name}\n          </p>\n          <Table\n            className={s.ledgers}\n            columns={[\n              { label: \"Date\" },\n              { label: \"No\" },\n              { label: \"Type\" },\n              { label: \"In\", className: \"text-right\" },\n              { label: \"Out\", className: \"text-right\" },\n            ]}\n            countRecord={() => data.length}\n            tfoot={\n              <tfoot style={{ marginTop: \"0\" }}>\n                <tr className={s.footer}>\n                  <td />\n                  <td />\n                  <td style={{ fontWeight: \"bold\" }}>Totals</td>\n                  <td className=\"text-right\">\n                    {data.reduce((p, c) => p + c.inward, 0).toFixed(2)}\n                  </td>\n                  <td className=\"text-right\">\n                    {data.reduce((p, c) => p + c.outward, 0).toFixed(2)}\n                  </td>\n                </tr>\n                <tr className={s.closing}>\n                  <td />\n                  <td />\n                  <td style={{ fontWeight: \"bold\" }}>Closing Stock</td>\n                  <td className=\"text-right\">\n                    {(\n                      (openingStock || 0) +\n                      data.reduce((p, c) => p + (c.inward - c.outward), 0)\n                    ).toFixed(2)}\n                  </td>\n                  <td />\n                </tr>\n              </tfoot>\n            }\n          >\n            <tr>\n              <td />\n              <td />\n              <td style={{ fontWeight: \"bold\" }}>Opening Stock</td>\n              <td className=\"text-right\">{openingStock}</td>\n              <td />\n            </tr>\n            {data.map((row, i, arr) => {\n              return (\n                <tr key={i}>\n                  <td className=\"grid\">\n                    {row.createdAt && arr[i - 1]?.rec_id !== row.rec_id && (\n                      <>\n                        <Moment\n                          style={{ fontSize: \"14px\" }}\n                          format=\"DD MMM YYYY\"\n                        >\n                          {row.createdAt}\n                        </Moment>\n                        <Moment format=\"hh:mma\">{row.createdAt}</Moment>\n                      </>\n                    )}\n                  </td>\n                  <td>{arr[i - 1]?.rec_id !== row.rec_id && row.no}</td>\n                  <td>{arr[i - 1]?.rec_id !== row.rec_id && row.type}</td>\n                  <td className=\"text-right\">\n                    {row.inward ? row.inward.toFixed(2) : null}\n                  </td>\n                  <td className=\"text-right\">\n                    {row.outward ? row.outward.toFixed(2) : null}\n                  </td>\n                </tr>\n              );\n            })}\n          </Table>\n        </>\n      ) : (\n        <p className={s.analysysPlaceholder}>No product has been selected.</p>\n      )}\n    </div>\n  );\n};\n\nconst Analysys = ({ branch, account }) => {\n  const [months, setMonths] = useState([]);\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useState({});\n  const [openingStocks, setOpeningStocks] = useState({});\n  const [calculation, setCalculation] = useState(\"statement\");\n  const { get, loading } = useFetch(endpoints.inventoryMonthlyAnalysys);\n  useEffect(() => {\n    if (account) {\n      const query = { accountId: account._id };\n      if (branch) {\n        query.branch = branch._id;\n      }\n      if (filters.startDate && filters.endDate) {\n        query.startDate = filters.startDate;\n        query.endDate = filters.endDate;\n      }\n      get({ query })\n        .then(({ data }) => {\n          if (data.success) {\n            setData(data.data);\n            setMonths(data.months);\n            setOpeningStocks(data.openingStocks);\n          } else {\n            Prompt({ type: \"error\", message: data.message });\n          }\n        })\n        .catch((err) => Prompt({ type: \"error\", message: err.message }));\n    } else {\n      setData([]);\n      setMonths([]);\n    }\n  }, [account, filters, branch]);\n  return (\n    <div className={s.innerContentWrapper}>\n      {account ? (\n        <div>\n          <AnalysysFilters filter={filters} setFilters={setFilters} />\n          <div className=\"mt-1 flex gap-2 align-center\">\n            <p\n              style={{ fontWeight: \"600\", fontSize: \"1.2em\" }}\n              className=\"pl_5\"\n            >\n              {account.name}\n            </p>\n            <div className=\"flex gap-2\">\n              <label className=\"flex align-center gap_5\">\n                <input\n                  name=\"calculation\"\n                  type=\"radio\"\n                  value=\"statement\"\n                  checked={calculation === \"statement\"}\n                  onChange={(e) => setCalculation(e.target.value)}\n                />\n                Stock Statement\n              </label>\n              <label className=\"flex align-center gap_5\">\n                <input\n                  name=\"calculation\"\n                  type=\"radio\"\n                  value=\"sum_in\"\n                  checked={calculation === \"sum_in\"}\n                  onChange={(e) => setCalculation(e.target.value)}\n                />\n                Total In\n              </label>\n              <label className=\"flex align-center gap_5\">\n                <input\n                  name=\"calculation\"\n                  type=\"radio\"\n                  value=\"sum_out\"\n                  checked={calculation === \"sum_out\"}\n                  onChange={(e) => setCalculation(e.target.value)}\n                />\n                Total Out\n              </label>\n              <label className=\"flex align-center gap_5\">\n                <input\n                  name=\"calculation\"\n                  type=\"radio\"\n                  value=\"net\"\n                  checked={calculation === \"net\"}\n                  onChange={(e) => setCalculation(e.target.value)}\n                />\n                Net\n              </label>\n            </div>\n          </div>\n          <Table\n            loading={loading}\n            className={s.analysys}\n            columns={[\n              { label: account.name },\n              ...(calculation === \"statement\"\n                ? [\n                    { label: \"Opening Stock\", className: \"text-right\" },\n                    { label: \"Total In\", className: \"text-right\" },\n                    { label: \"Total Out\", className: \"text-right\" },\n                    { label: \"Closing Stock\", className: \"text-right\" },\n                  ]\n                : (months || []).map((item) => ({\n                    label: item.label,\n                    className: \"text-right\",\n                  }))),\n            ]}\n            tfoot={\n              <tfoot style={{ marginTop: \"0\" }}>\n                <tr\n                  className={s.footer}\n                  style={{\n                    borderTop: \"1px solid #979797\",\n                    padding: \"0 0.5rem\",\n                    paddingTop: \"1rem\",\n                  }}\n                >\n                  <td>Total</td>\n                  {calculation === \"statement\" ? (\n                    <>\n                      <td className=\"text-right\">\n                        {Object.values(openingStocks).reduce(\n                          (p, c) => p + c,\n                          0\n                        )}\n                      </td>\n                      <td className=\"text-right\">\n                        {data.reduce(\n                          (p, c) =>\n                            p +\n                            c.entries.flat().reduce((p, c) => p + c.inward, 0),\n                          0\n                        )}\n                      </td>\n                      <td className=\"text-right\">\n                        {data.reduce(\n                          (p, c) =>\n                            p +\n                            c.entries.flat().reduce((p, c) => p + c.outward, 0),\n                          0\n                        )}\n                      </td>\n                      <td className=\"text-right\">\n                        {Object.values(openingStocks).reduce(\n                          (p, c) => p + c,\n                          0\n                        ) +\n                          data.reduce(\n                            (p, c) =>\n                              p +\n                              c.entries\n                                .flat()\n                                .reduce(\n                                  (p, c) => p + (c.inward - c.outward),\n                                  0\n                                ),\n                            0\n                          )}\n                      </td>\n                    </>\n                  ) : (\n                    (months || []).map((month, i) => (\n                      <td key={i} className=\"text-right\">\n                        {analyzeAccounts(\n                          calculation,\n                          data.reduce((prev, curr, j) => {\n                            prev.push(...curr.entries[i]);\n                            return prev;\n                          }, [])\n                        )}\n                      </td>\n                    ))\n                  )}\n                </tr>\n              </tfoot>\n            }\n          >\n            {(data || []).map((row, i, arr) => {\n              return (\n                <tr key={i}>\n                  <td className=\"grid\">{row.name}</td>\n                  {calculation === \"statement\" ? (\n                    <>\n                      <td className=\"text-right\">\n                        {openingStocks[row._id] || 0}\n                      </td>\n                      <td className=\"text-right\">\n                        {row.entries.flat().reduce((p, c) => p + c.inward, 0)}\n                      </td>\n                      <td className=\"text-right\">\n                        {row.entries.flat().reduce((p, c) => p + c.outward, 0)}\n                      </td>\n                      <td className=\"text-right\">\n                        {(openingStocks[row._id] || 0) +\n                          row.entries\n                            .flat()\n                            .reduce(\n                              (p, c) =>\n                                p + ((c.inward || 0) - (c.outward || 0)),\n                              0\n                            )}\n                      </td>\n                    </>\n                  ) : (\n                    (months || []).map((month, i) => (\n                      <td key={i} className=\"text-right\">\n                        {analyzeAccounts(\n                          calculation,\n                          row.entries[i],\n                          openingStocks[row._id]\n                        )}\n                      </td>\n                    ))\n                  )}\n                </tr>\n              );\n            })}\n          </Table>\n        </div>\n      ) : (\n        <p className={s.analysysPlaceholder}>No group has been selected.</p>\n      )}\n    </div>\n  );\n};\n\nconst analyzeAccounts = (calculation, entries, openingBalance = 0) => {\n  let result = null;\n  if (calculation === \"sum_in\") {\n    result = entries.reduce((p, c) => p + c.inward, 0);\n  } else if (calculation === \"sum_out\") {\n    result = entries.reduce((p, c) => p + c.outward, 0);\n  } else if (calculation === \"net\") {\n    result = entries.reduce((p, c) => p + (c.inward - c.outward), 0);\n  } else if (calculation === \"statement\") {\n    result =\n      entries.reduce((p, c) => p + (c.inward - c.outward), 0) + openingBalance;\n    // return;\n  }\n  return result.toFixed(2);\n};\n\nexport default Accounting;\n"],"names":["mainSchema","yup","name","required","edit","onSuccess","useForm","resolver","useYup","handleSubmit","register","reset","errors","formState","useFetch","endpoints","_id","createMaster","post","updateMaster","put","loading","useEffect","onSubmit","values","then","data","success","Prompt","type","message","catch","err","className","s","label","error","disabled","isGroup","parent","when","is","schema","otherwise","masters","useState","entries","setEntries","control","setValue","setError","watch","clearErrors","openingStocks","length","forEach","entry","i","branch","openingStock","cost","reorderQty","entries_0_branch","entries_0_openingStock","entries_0_cost","entries_0_reorderQty","Math","random","toString","some","payload","map","formOptions","placeholder","options","value","item","url","getQuery","v","handleData","onChange","opt","prev","e","target","onClick","filter","accountId","debit","credit","VoucherFilters","filters","setFilters","finPeriod","useContext","SiteContext","startDate","endDate","min","moment","max","AnalysysFilters","AccountNode","account","setAddMaster","activeGroup","activeLeaf","activeLeavs","children","setChildren","open","setOpen","getMasters","get","totalChildren","query","style","whiteSpace","height","width","border","borderRadius","pointerEvents","includes","child","Branches","branches","setBranches","addBranch","setAddBranch","head","BranchForm","newBranch","b","Vouchers","vouchers","setVouchers","voucherTableRef","useRef","getVouchers","ref","countRecord","reduce","p","c","arr","rec_id","columns","tfoot","fontWeight","inward","toFixed","outward","row","fontSize","format","createdAt","no","accountName","Ledgers","setData","setOpeningStock","getLedgers","marginTop","Analysys","months","setMonths","setOpeningStocks","calculation","setCalculation","checked","borderTop","padding","paddingTop","Object","flat","month","analyzeAccounts","curr","j","push","openingBalance","result","setSidebarOpen","addMaster","setMasters","tab","setTab","sidebarTab","setSidebarTab","analysysAcc","setAnalysysAcc","ledger","setLedger","journalAcc","getBranches","setBranch","treeData","useMemo","accounts","accountMap","tree","buildTree","activeTab","tabs","acc","firstRecords","otherRecords","rec","detailedRows","obj","index","self","findIndex","o","rows","marginBottom","textAlign","textWrap","color","maxWidth","MasterForm"],"sourceRoot":""}